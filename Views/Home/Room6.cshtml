<!DOCTYPE html>
<html lang="es">
<head>
  <meta charset="UTF-8">
    <title>:3</title>
  <style>
    :root {
      --bg: #000;
      --fg: #00ffcc;
      --alert: #ff0066;
      --glitch1: #ff00c8;
      --glitch2: #00ffff;
      --quantum1: #00ff88;
      --quantum2: #ff00ff;
      --portal: #66ff99;
    }
    * { box-sizing: border-box; }
    body {
      margin: 0;
      font-family: monospace;
      background: radial-gradient(var(--bg), #111);
      color: var(--fg);
      overflow: hidden;
      height: 100vh;
    }
    canvas, .crazyLight, .flashOverlay {
      position: fixed;
      top: 0; left: 0;
      width: 100vw;
      height: 100vh;
      z-index: -1;
    }
    .introLore {
      position: absolute;
      top: 0; left: 0;
      width: 100vw;
      height: 100vh;
      background: black;
      color: var(--fg);
      display: flex;
      align-items: center;
      justify-content: center;
      flex-direction: column;
      font-size: 24px;
      padding: 30px;
      z-index: 999;
      animation: introFade 15s ease forwards;
      text-shadow: 0 0 10px var(--fg);
    }
    @@keyframes introFade {
      0% { opacity: 1; background: black; }
      10% { opacity: 1; background: #111; }
      90% { opacity: 1; background: black; }
      100% { opacity: 0; pointer-events: none; background: transparent; }
    }
    .intro-text {
      text-align: center;
      opacity: 0;
      transform: translateY(20px);
      animation: textReveal 0.8s forwards;
      animation-delay: var(--delay);
    }
    @@keyframes textReveal {
      to {
        opacity: 1;
        transform: translateY(0);
      }
    }
    .reality-break {
      animation: realityGlitch 0.2s infinite;
    }
    @@keyframes realityGlitch {
      0% { clip-path: inset(0 0 0 0); }
      20% { clip-path: inset(20% 0 0 0); }
      40% { clip-path: inset(0 20% 0 0); }
      60% { clip-path: inset(0 0 20% 0); }
      80% { clip-path: inset(0 0 0 20%); }
      100% { clip-path: inset(0 0 0 0); }
    }
    .quantum-flash {
      position: fixed;
      inset: 0;
      background: white;
      mix-blend-mode: overlay;
      opacity: 0;
      z-index: 1000;
      pointer-events: none;
    }
    .warning-text {
      color: var(--alert);
      font-weight: bold;
      animation: warningPulse 0.5s infinite alternate;
    }
    @@keyframes warningPulse {
      from { text-shadow: 0 0 10px var(--alert); }
      to { text-shadow: 0 0 20px var(--alert), 0 0 40px var(--alert); }
    }
    .glitch {
      animation: glitchFlash 0.3s infinite alternate;
    }
    @@keyframes glitchFlash {
      from { text-shadow: 2px 0 var(--glitch1), -2px 0 var(--glitch2); }
      to { text-shadow: -2px 0 var(--glitch2), 2px 0 var(--glitch1); }
    }
    .flashOverlay {
      background: rgba(255, 255, 255, 0.1);
      animation: flashRGB 2s infinite;
      pointer-events: none;
    }
    @@keyframes flashRGB {
      0% { background: rgba(255,0,0,0.1); }
      25% { background: rgba(0,255,0,0.1); }
      50% { background: rgba(0,0,255,0.1); }
      75% { background: rgba(255,255,0,0.1); }
      100% { background: rgba(255,0,255,0.1); }
    }
    .instrucciones, .terminal, #score {
      position: relative;
      z-index: 2;
    }
    .instrucciones {
      background: rgba(0, 0, 0, 0.75);
      padding: 20px;
      border: 1px solid var(--fg);
      max-width: 800px;
      margin: 20px auto;
    }
    .terminal {
      background: #000;
      border: 2px dashed var(--fg);
      padding: 20px;
      height: 220px;
      overflow-y: auto;
      margin-top: 20px;
    }
    .grid {
      display: grid;
      grid-template-columns: repeat(5, 80px);
      grid-gap: 10px;
      justify-content: center;
      margin: 30px 0;
    }
    .cell {
      width: 80px;
      height: 80px;
      background: #111;
      border: 1px solid var(--fg);
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 20px;
      cursor: pointer;
      transition: 0.2s;
      position: relative;
      overflow: visible;
    }
    .cell::before {
      content: '';
      position: absolute;
      inset: -2px;
      background: linear-gradient(45deg, var(--quantum1), var(--quantum2));
      border-radius: inherit;
      opacity: 0;
      transition: opacity 0.3s;
      z-index: -1;
      filter: blur(4px);
    }
    .cell:hover::before {
      opacity: 0.5;
      animation: cellGlow 2s infinite;
    }
    .cell.activo::before {
      opacity: 1;
      animation: activeCellPulse 1s infinite;
    }
    @@keyframes cellGlow {
      0%, 100% { transform: scale(1); filter: hue-rotate(0deg); }
      50% { transform: scale(1.1); filter: hue-rotate(180deg); }
    }
    @@keyframes activeCellPulse {
      0% { transform: scale(1); opacity: 0.8; }
      50% { transform: scale(1.2); opacity: 1; }
      100% { transform: scale(1); opacity: 0.8; }
    }
    .cell.activo {
      animation: pulseLight 0.4s alternate infinite;
      background: #ff0066;
      color: white;
    }
    @@keyframes pulseLight {
      0% { box-shadow: 0 0 10px #ff0088, 0 0 30px #ff0088; }
      100% { box-shadow: 0 0 20px #fff, 0 0 40px #00ffff; }
    }
    #score {
      font-size: 18px;
      margin-top: 10px;
      text-align: center;
      position: relative;
      text-shadow: 0 0 10px var(--fg);
      animation: scorePulse 2s infinite;
    }
    @@keyframes scorePulse {
      0%, 100% { transform: scale(1); filter: brightness(1); }
      50% { transform: scale(1.1); filter: brightness(1.3); }
    }
    @@keyframes portalFlash {
  0% { filter: hue-rotate(0deg) brightness(1); }
  100% { filter: hue-rotate(180deg) brightness(1.4); }
}
    /* Quantum particles effect */
    .quantum-field {
      position: fixed;
      top: 0;
      left: 0;
      width: 100vw;
      height: 100vh;
      pointer-events: none;
      z-index: 1;
    }

    .quantum-particle {
      position: absolute;
      width: 4px;
      height: 4px;
      background: var(--quantum1);
      border-radius: 50%;
      filter: blur(2px);
      animation: quantumFloat 4s infinite;
    }

    @@keyframes quantumFloat {
      0% { transform: translate(0, 0) scale(1); opacity: 0.5; }
      50% { transform: translate(var(--moveX), var(--moveY)) scale(1.5); opacity: 1; }
      100% { transform: translate(calc(var(--moveX) * 2), calc(var(--moveY) * 2)) scale(1); opacity: 0; }
    }

    /* Reality distortion effect */
    .reality-distortion {
      position: fixed;
      top: 0;
      left: 0;
      width: 100vw;
      height: 100vh;
      background: radial-gradient(circle at center, transparent 0%, rgba(0,255,0,0.1) 50%, transparent 100%);
      mix-blend-mode: screen;
      animation: realityPulse 8s infinite;
      pointer-events: none;
      z-index: 0;
    }

    @@keyframes realityPulse {
      0%, 100% { transform: scale(1); opacity: 0.3; }
      50% { transform: scale(1.5); opacity: 0.7; }
    }

    /* Portal effects */
    .portal-ring {
      position: fixed;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      width: 200px;
      height: 200px;
      border: 4px solid var(--portal);
      border-radius: 50%;
      opacity: 0;
      pointer-events: none;
      filter: blur(4px);
      z-index: 2;
    }

    .portal-ring.active {
      animation: portalOpen 3s forwards;
    }

    @@keyframes portalOpen {
      0% { transform: translate(-50%, -50%) scale(0) rotate(0deg); opacity: 0; }
      50% { transform: translate(-50%, -50%) scale(1.5) rotate(180deg); opacity: 0.8; }
      100% { transform: translate(-50%, -50%) scale(0) rotate(360deg); opacity: 0; }
    }

    /* Enhanced terminal effects */
    .terminal {
      position: relative;
      overflow: hidden;
    }

    .terminal::before {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 2px;
      background: var(--fg);
      animation: terminalScan 2s linear infinite;
      opacity: 0.5;
    }

    @@keyframes terminalScan {
      0% { transform: translateY(-100%); }
      100% { transform: translateY(220px); }
    }

    /* Victory effects */
    .victory-effect {
      position: fixed;
      inset: 0;
      background: radial-gradient(circle at center, transparent, rgba(0,255,0,0.2));
      pointer-events: none;
      opacity: 0;
      z-index: 10;
    }

    .victory-effect.active {
      animation: victoryPulse 3s forwards;
    }

    @@keyframes victoryPulse {
      0% { opacity: 0; transform: scale(0); }
      50% { opacity: 1; transform: scale(1.5); }
      100% { opacity: 0; transform: scale(2); }
    }
  </style>
</head>
<body>
<canvas id="ditherBG"></canvas>

<audio id="bgAudio" src="/img/cemetrygates.mp3" autoplay loop></audio>
<div class="flashOverlay"></div>
<canvas id="matrix"></canvas>
<div class="introLore" id="introLore">
  <div class="intro-text" style="--delay: 0s">
    <h1 style="color: var(--quantum1);">[INICIANDO ROOM 6: NÚCLEO DEL CAOS]</h1>
  </div>
  <div class="intro-text" style="--delay: 2s">
    <p class="warning-text">⚠️ ADVERTENCIA: ANOMALÍA CUÁNTICA DETECTADA ⚠️</p>
    <p>Inestabilidad del núcleo al 89% y aumentando...</p>
  </div>
  <div class="intro-text" style="--delay: 4s">
    <p>[RICK] *burp* M-morty... llegamos al núcleo del sistema.</p>
    <p>[RICK] El hacker ha corrompido el código base de la realidad.</p>
  </div>
  <div class="intro-text" style="--delay: 6s">
    <p>[MORTY] ¡Rick! ¡Los bugs! ¡Se están moviendo solos!</p>
    <p>[RICK] No son bugs, Morty... es el código del hacker tomando control.</p>
  </div>
  <div class="intro-text" style="--delay: 8s">
    <p class="warning-text">[SISTEMA] ALERTA: COLAPSO DIMENSIONAL INMINENTE</p>
    <p>[SISTEMA] Iniciando protocolo de contención cuántica...</p>
  </div>
  <div class="intro-text" style="--delay: 10s">
    <p>[RICK] Morty, escuchá bien: tenés que estabilizar el núcleo.</p>
    <p>[RICK] Cada luz es una puerta que el hacker está abriendo. ¡Sellalas todas!</p>
  </div>
  <div class="intro-text" style="--delay: 12s">
    <p class="warning-text">INICIANDO SECUENCIA EN 3... 2... 1...</p>
  </div>
</div>
<div class="quantum-flash" id="quantumFlash"></div>
<div class="instrucciones">
  <h2>⚠️ Room 6: Caos del Núcleo</h2>
  <p>Rick: Morty, estamos en el núcleo caótico de la realidad. La física no responde. Los bugs están vivos. Y el código... se genera solo.</p>
  <p><strong>OBJETIVO:</strong> Tenés 60 segundos para hacer clic en los <span style="color:#ff66cc">CUADRADOS ACTIVOS</span> que parpadean al azar. Cada clic correcto suma +1. Cada clic fallado resta -1.</p>
  <p>Lográ <strong>15 puntos</strong> y Rick desbloqueará el núcleo para acceder a la siguiente sala.</p>
</div>
<div class="grid" id="grid"></div>
<div id="score">Puntaje: 0</div>
<div class="terminal" id="terminal"></div>
<div class="quantum-field"></div>
<div class="reality-distortion"></div>
<div class="portal-ring"></div>
<div class="victory-effect"></div>
<script>
window.addEventListener('DOMContentLoaded', () => {
  const consoleDiv = document.getElementById('console');
  const quantumFlash = document.getElementById('quantumFlash');
  
  // Quantum flash effects
  function triggerQuantumFlash() {
    quantumFlash.style.opacity = '0.8';
    setTimeout(() => {
      quantumFlash.style.opacity = '0';
    }, 100);
  }

  // Trigger quantum flashes randomly
  setInterval(triggerQuantumFlash, 2000 + Math.random() * 3000);

  // Add reality break effect to certain messages
  document.querySelectorAll('.warning-text').forEach(el => {
    el.addEventListener('mouseover', () => {
      document.body.classList.add('reality-break');
      triggerQuantumFlash();
    });
    el.addEventListener('mouseout', () => {
      document.body.classList.remove('reality-break');
    });
  });

  const intro = [
    "[NÚCLEO] Iniciando diagnóstico de estabilidad...",
    "[NÚCLEO] Detectando fluctuaciones cuánticas...",
    "[RICK] *burp* El núcleo está vivo, Morty...",
    "[RICK] Cada error es una grieta en la realidad.",
    "[SISTEMA] ADVERTENCIA: Integridad dimensional al 31%",
    "[MORTY] ¡R-rick! ¡Las luces están parpadeando solas!",
    "[RICK] ¡Son portales Morty! ¡Portales microscópicos!",
    "[SISTEMA] Activando matriz de contención cuántica...",
    "[PC] Probabilidad de supervivencia: 13.7%",
    "[RICK] ¡Cállate, máquina estúpida! *burp*",
    "[SISTEMA] ALERTA: Colapso del núcleo en progreso",
    "[RICK] ¡RÁPIDO MORTY! ¡SELLA ESAS GRIETAS!",
    "[NÚCLEO] Iniciando prueba de estabilidad..."
  ];

  let i = 0;
  const escribirIntro = setInterval(() => {
    if (i < intro.length) {
      const className = i === 4 ? 'warning-text' : 
                       i === 10 ? 'reality-break' : '';
      consoleDiv.innerHTML += `<div class="${className}">> ${intro[i]}</div>`;
      consoleDiv.scrollTop = consoleDiv.scrollHeight;
      
      if (i === 4 || i === 10) {
        triggerQuantumFlash();
        document.body.classList.add('reality-break');
        setTimeout(() => document.body.classList.remove('reality-break'), 500);
      }
      i++;
    } else {
      clearInterval(escribirIntro);
      iniciarCaos();
    }
  }, 1000);
});
const canvas = document.getElementById('matrix');
const ctx = canvas.getContext('2d');
canvas.width = window.innerWidth;
canvas.height = window.innerHeight;
const cols = Math.floor(canvas.width / 20);
const ypos = Array(cols).fill(0);
function matrixRain() {
  ctx.fillStyle = '#0003';
  ctx.fillRect(0, 0, canvas.width, canvas.height);
  ctx.fillStyle = '#0ff';
  ctx.font = '15pt monospace';
  ypos.forEach((y, ind) => {
    const text = String.fromCharCode(Math.random() * 128);
    const x = ind * 20;
    ctx.fillText(text, x, y);
    ypos[ind] = y > 100 + Math.random() * 10000 ? 0 : y + 20;
  });
}
setInterval(matrixRain, 50);

const grid = document.getElementById("grid");
const scoreDisplay = document.getElementById("score");
const terminal = document.getElementById("terminal");
let score = 0, tiempo = 60, intervalo, finalizado = false, celdaActiva = -1;
const frases = [
  "¡Apuntá mejor Morty!",
  "¡Estás fallando demasiado!",
  "El núcleo está cada vez más inestable...",
  "Esa luz rosa no es decoración, Morty, es radiación!",
  "¡20 puntos o morimos bugueados!"
];
function crearCeldas() {
  for (let i = 0; i < 25; i++) {
    const cell = document.createElement("div");
    cell.className = "cell";
    cell.id = `cell${i}`;
    cell.onclick = () => {
      if (finalizado) return;
      if (cell.classList.contains("activo")) {
        score++;
        terminal.innerText += `✔️ Click correcto en ${cell.id}\n`;
      } else {
        score--;
        terminal.innerText += `❌ Click fallado en ${cell.id}\n`;
      }
      actualizar();
    };
    grid.appendChild(cell);
  }
}
function activarRandom() {
  document.querySelectorAll('.cell').forEach(c => c.classList.remove('activo'));
  let r;
  do { r = Math.floor(Math.random() * 25); } while (r === celdaActiva);
  celdaActiva = r;
  const nueva = document.getElementById(`cell${r}`);
  nueva.classList.add("activo");
  setTimeout(() => {
    if (nueva.classList.contains("activo")) {
      nueva.classList.remove("activo");
      celdaActiva = -1;
    }
  }, 900); 
}

function actualizar() {
  scoreDisplay.innerText = `Puntaje: ${score}`;
  if (score >= 15 && !finalizado) {
    finalizado = true;
    clearInterval(intervalo);
    document.body.innerHTML = `<div id="finalConsola" style="color: #00ff00; font-family: monospace; padding: 40px; font-size: 16px; white-space: pre-wrap;">
[CONEXIÓN ESTABLECIDA]
>>> Rick: Morty... estás viendo el núcleo de la red de realidades.
>>> Morty: ¿Y qué hay en la siguiente habitación?
>>> Rick: Algo peor que bugs, Morty... un sistema que piensa por sí mismo.
>>> Morty: ¿Cómo que piensa? ¿Tiene conciencia?
>>> Rick: Sí, Morty. Se reprograma solo, aprende de nosotros...
>>> Rick: Si no lo controlamos... nos va a compilar a nosotros.
>>> Morty: ¿Y entonces qué hacemos?
>>> Rick: Prepararnos. En la siguiente sala... no hay instrucciones.
>>> Rick: Solo decisiones.
[PREPARANDO ROOM 7...]
</div>`;
    setTimeout(() => window.location.href = "/Home/Room7codex", 9000);
  }
}
function iniciarCaos() {
  crearCeldas();
  intervalo = setInterval(() => {
    activarRandom();
    tiempo--;
    if (tiempo % 10 === 0 && tiempo > 0) {
      terminal.innerText += `\nRick: ${frases[Math.floor(Math.random() * frases.length)]}`;
    }
    if (tiempo <= 0 && !finalizado) {
      clearInterval(intervalo);
      terminal.innerHTML += "\n💥 Fracaso. El núcleo colapsó. Reiniciando...";
      document.body.classList.add("glitch");
      setTimeout(() => location.reload(), 5000);
    }
  }, 700);
}
setTimeout(iniciarCaos, 10500);
function locuraVisual() {
  const gridElement = document.querySelector('.grid');
  const scaleX = (Math.random() * 4 + 1).toFixed(2);
  const scaleY = (Math.random() * 2 + 0.3).toFixed(2);
  const rotate = (Math.random() * 30 - 15).toFixed(2);
  const skewX = (Math.random() * 20 - 10).toFixed(2);
  const skewY = (Math.random() * 20 - 10).toFixed(2);

  gridElement.style.transition = 'transform 0.4s ease';
  gridElement.style.transform = `scaleX(${scaleX}) scaleY(${scaleY}) rotate(${rotate}deg) skew(${skewX}deg, ${skewY}deg)`;
  gridElement.classList.add('glitch');
  setTimeout(() => {
    gridElement.style.transform = 'scaleX(1) scaleY(1) rotate(0deg) skew(0deg, 0deg)';
    gridElement.classList.remove('glitch');
  }, 1000);

  const flash = document.createElement('div');
  flash.style.position = 'fixed';
  flash.style.top = '0';
  flash.style.left = '0';
  flash.style.width = '100vw';
  flash.style.height = '100vh';
  flash.style.zIndex = '999';
  flash.style.background = `rgba(${Math.floor(Math.random()*255)},${Math.floor(Math.random()*255)},${Math.floor(Math.random()*255)},0.8)`;
  flash.style.transition = 'opacity 0.2s';
  document.body.appendChild(flash);
  setTimeout(() => {
    flash.style.opacity = '0';
    setTimeout(() => document.body.removeChild(flash), 200);
  }, 100);

  for (let i = 0; i < 3; i++) {
    const clone = gridElement.cloneNode(true);
    clone.style.position = 'fixed';
    clone.style.opacity = '0.1';
    clone.style.pointerEvents = 'none';
    clone.style.zIndex = '100';
    clone.style.top = `${Math.random() * 80}%`;
    clone.style.left = `${Math.random() * 80}%`;
    clone.style.transform = `scale(${Math.random() * 2 + 0.5}) rotate(${Math.random() * 360}deg)`;
    document.body.appendChild(clone);
    setTimeout(() => document.body.removeChild(clone), 800);
  }
}

function glitchRandom() {
  const glitch = document.createElement('div');
  glitch.className = 'glitch';
  glitch.innerText = 'ERROR EN LA MATRIZ - DIMENSIÓN INVALIDA';
  glitch.style.position = 'fixed';
  glitch.style.top = `${Math.random() * 80 + 10}%`;
  glitch.style.left = `${Math.random() * 80 + 10}%`;
  glitch.style.color = '#ff00c8';
  glitch.style.fontSize = `${Math.floor(Math.random() * 40 + 20)}px`;
  glitch.style.zIndex = '1000';
  glitch.style.animation = 'glitchFlash 0.2s infinite alternate';
  document.body.appendChild(glitch);
  setTimeout(() => document.body.removeChild(glitch), 1000);
}

function invocarPortal() {
  const portal = document.createElement('img');
  portal.src = '/img/anuncio9.gif';
  portal.style.position = 'fixed';
  portal.style.top = `${Math.random() * 70 + 10}%`;
  portal.style.left = `${Math.random() * 70 + 10}%`;
  portal.style.width = '200px';
  portal.style.zIndex = '10000';
  portal.style.opacity = '0.8';
  portal.style.pointerEvents = 'none';
  document.body.appendChild(portal);

  const overlay = document.createElement('div');
  overlay.style.position = 'fixed';
  overlay.style.top = 0;
  overlay.style.left = 0;
  overlay.style.width = '100vw';
  overlay.style.height = '100vh';
  overlay.style.zIndex = '9999';
  overlay.style.background = 'radial-gradient(circle, rgba(255,0,255,0.2), rgba(0,255,255,0.3), rgba(255,255,0,0.2))';
  overlay.style.animation = 'portalFlash 1s infinite alternate';
  document.body.appendChild(overlay);

  setTimeout(() => {
    document.body.removeChild(portal);
    document.body.removeChild(overlay);
  }, 3000);
}

function gridDualidad() {
  const grid = document.querySelectorAll('.cell');
  grid.forEach(cell => {
    const dual = Math.random() > 0.5;
    cell.style.transition = 'all 0.3s ease';
    cell.style.background = dual ? '#ff0033' : '#00ffff';
    cell.style.boxShadow = dual ? '0 0 12px #ff0033' : '0 0 12px #00ffff';
    cell.style.transform = `rotate(${Math.random() * 40 - 20}deg)`;
  });
  setTimeout(() => {
    grid.forEach(cell => {
      cell.style.background = '';
      cell.style.boxShadow = '';
      cell.style.transform = 'rotate(0deg)';
    });
  }, 3000);
}

setInterval(locuraVisual, 5000);
setInterval(() => {
  if (Math.random() < 0.4) glitchRandom();
}, 3000);
setInterval(() => {
  if (Math.random() < 0.25) invocarPortal();
}, 8000);
setInterval(() => {
  if (Math.random() < 0.3) gridDualidad();
}, 7000);

function createQuantumParticles() {
    const field = document.querySelector('.quantum-field');
    for (let i = 0; i < 50; i++) {
        const particle = document.createElement('div');
        particle.className = 'quantum-particle';
        particle.style.left = Math.random() * window.innerWidth + 'px';
        particle.style.top = Math.random() * window.innerHeight + 'px';
        particle.style.setProperty('--moveX', (Math.random() * 200 - 100) + 'px');
        particle.style.setProperty('--moveY', (Math.random() * 200 - 100) + 'px');
        field.appendChild(particle);
        
        // Remove particle after animation
        particle.addEventListener('animationend', () => particle.remove());
    }
    setTimeout(createQuantumParticles, 2000);
}

function showVictoryEffects() {
    const portal = document.querySelector('.portal-ring');
    const victory = document.querySelector('.victory-effect');
    portal.classList.add('active');
    victory.classList.add('active');
    
    // Create extra quantum particles for victory
    for (let i = 0; i < 100; i++) {
        setTimeout(() => {
            const particle = document.createElement('div');
            particle.className = 'quantum-particle';
            particle.style.left = '50%';
            particle.style.top = '50%';
            particle.style.setProperty('--moveX', (Math.random() * 400 - 200) + 'px');
            particle.style.setProperty('--moveY', (Math.random() * 400 - 200) + 'px');
            document.querySelector('.quantum-field').appendChild(particle);
        }, i * 50);
    }
}

// Initialize quantum particles
createQuantumParticles();

// Add to your existing victory condition
if (score >= 15) {
    showVictoryEffects();
    // ... rest of your victory code ...
}
</script>

</body>
</html>