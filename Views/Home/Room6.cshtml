<!DOCTYPE html>
<html lang="es">
<head>
  <meta charset="UTF-8">
    <title>¿Qué harías si nadie te estuviera mirando?</title>
  <link rel="icon" type="image/png" href="~/img/morty-icon.png" />
  <style>
    :root {
      --bg: #000;
      --fg: #00ffcc;
      --alert: #ff0066;
      --glitch1: #ff00c8;
      --glitch2: #00ffff;
      --quantum1: #00ff88;
      --quantum2: #ff00ff;
      --portal: #66ff99;
    }
    * { box-sizing: border-box; }
    body {
      margin: 0;
      font-family: monospace;
      background: radial-gradient(var(--bg), #111);
      color: var(--fg);
      overflow: hidden;
      height: 100vh;
      cursor: url('/img/cursor-xp.png'), auto !important;
    }
    canvas, .crazyLight, .flashOverlay {
      position: fixed;
      top: 0; left: 0;
      width: 100vw;
      height: 100vh;
      z-index: -1;
    }
    .introLore {
      position: absolute;
      top: 0; left: 0;
      width: 100vw;
      height: 100vh;
      background: black;
      color: var(--fg);
      display: flex;
      align-items: center;
      justify-content: center;
      flex-direction: column;
      font-size: 24px;
      padding: 30px;
      z-index: 999;
      animation: introFade 15s ease forwards;
      text-shadow: 0 0 10px var(--fg);
    }
    @@keyframes introFade {
      0% { opacity: 1; background: black; }
      10% { opacity: 1; background: #111; }
      90% { opacity: 1; background: black; }
      100% { opacity: 0; pointer-events: none; background: transparent; }
    }
    .intro-text {
      text-align: center;
      opacity: 0;
      transform: translateY(20px);
      animation: textReveal 0.8s forwards;
      animation-delay: var(--delay);
    }
    @@keyframes textReveal {
      to {
        opacity: 1;
        transform: translateY(0);
      }
    }
    .reality-break {
      animation: realityGlitch 0.2s infinite;
    }
    @@keyframes realityGlitch {
      0% { clip-path: inset(0 0 0 0); }
      20% { clip-path: inset(20% 0 0 0); }
      40% { clip-path: inset(0 20% 0 0); }
      60% { clip-path: inset(0 0 20% 0); }
      80% { clip-path: inset(0 0 0 20%); }
      100% { clip-path: inset(0 0 0 0); }
    }
    .quantum-flash {
      position: fixed;
      inset: 0;
      background: white;
      mix-blend-mode: overlay;
      opacity: 0;
      z-index: 1000;
      pointer-events: none;
    }
    .warning-text {
      color: var(--alert);
      font-weight: bold;
      animation: warningPulse 0.5s infinite alternate;
    }
    @@keyframes warningPulse {
      from { text-shadow: 0 0 10px var(--alert); }
      to { text-shadow: 0 0 20px var(--alert), 0 0 40px var(--alert); }
    }
    .glitch {
      animation: glitchFlash 0.3s infinite alternate;
    }
    @@keyframes glitchFlash {
      from { text-shadow: 2px 0 var(--glitch1), -2px 0 var(--glitch2); }
      to { text-shadow: -2px 0 var(--glitch2), 2px 0 var(--glitch1); }
    }
    .flashOverlay {
      background: rgba(255, 255, 255, 0.1);
      animation: flashRGB 2s infinite;
      pointer-events: none;
    }
    @@keyframes flashRGB {
      0% { background: rgba(255,0,0,0.1); }
      25% { background: rgba(0,255,0,0.1); }
      50% { background: rgba(0,0,255,0.1); }
      75% { background: rgba(255,255,0,0.1); }
      100% { background: rgba(255,0,255,0.1); }
    }
    .instrucciones, .terminal, #score {
      position: relative;
      z-index: 2;
    }
    .instrucciones {
      background: rgba(0, 0, 0, 0.75);
      padding: 20px;
      border: 1px solid var(--fg);
      max-width: 800px;
      margin: 20px auto;
    }
    .terminal {
      background: #000;
      border: 2px dashed var(--fg);
      padding: 20px;
      height: 220px;
      overflow-y: auto;
      margin-top: 20px;
    }
    .grid {
      display: grid;
      grid-template-columns: repeat(5, 80px);
      grid-gap: 10px;
      justify-content: center;
      margin: 30px 0;
    }
    .cell {
      width: 80px;
      height: 80px;
      background: #111;
      border: 1px solid var(--fg);
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 20px;
      cursor: pointer;
      transition: 0.2s;
      position: relative;
      overflow: visible;
    }
    .cell::before {
      content: '';
      position: absolute;
      inset: -2px;
      background: linear-gradient(45deg, var(--quantum1), var(--quantum2));
      border-radius: inherit;
      opacity: 0;
      transition: opacity 0.3s;
      z-index: -1;
      filter: blur(4px);
    }
    .cell:hover::before {
      opacity: 0.5;
      animation: cellGlow 2s infinite;
    }
    .cell.activo::before {
      opacity: 1;
      animation: activeCellPulse 1s infinite;
    }
    @@keyframes cellGlow {
      0%, 100% { transform: scale(1); filter: hue-rotate(0deg); }
      50% { transform: scale(1.1); filter: hue-rotate(180deg); }
    }
    @@keyframes activeCellPulse {
      0% { transform: scale(1); opacity: 0.8; }
      50% { transform: scale(1.2); opacity: 1; }
      100% { transform: scale(1); opacity: 0.8; }
    }
    .cell.activo {
      animation: pulseLight 0.4s alternate infinite;
      background: #ff0066;
      color: white;
    }
    @@keyframes pulseLight {
      0% { box-shadow: 0 0 10px #ff0088, 0 0 30px #ff0088; }
      100% { box-shadow: 0 0 20px #fff, 0 0 40px #00ffff; }
    }
    #score {
      font-size: 18px;
      margin-top: 10px;
      text-align: center;
      position: relative;
      text-shadow: 0 0 10px var(--fg);
      animation: scorePulse 2s infinite;
    }
    @@keyframes scorePulse {
      0%, 100% { transform: scale(1); filter: brightness(1); }
      50% { transform: scale(1.1); filter: brightness(1.3); }
    }
    @@keyframes portalFlash {
  0% { filter: hue-rotate(0deg) brightness(1); }
  100% { filter: hue-rotate(180deg) brightness(1.4); }
}
    /* Quantum particles effect */
    .quantum-field {
      position: fixed;
      top: 0;
      left: 0;
      width: 100vw;
      height: 100vh;
      pointer-events: none;
      z-index: 1;
    }

    .quantum-particle {
      position: absolute;
      width: 4px;
      height: 4px;
      background: var(--quantum1);
      border-radius: 50%;
      filter: blur(2px);
      animation: quantumFloat 4s infinite;
    }

    @@keyframes quantumFloat {
      0% { transform: translate(0, 0) scale(1); opacity: 0.5; }
      50% { transform: translate(var(--moveX), var(--moveY)) scale(1.5); opacity: 1; }
      100% { transform: translate(calc(var(--moveX) * 2), calc(var(--moveY) * 2)) scale(1); opacity: 0; }
    }

    /* Reality distortion effect */
    .reality-distortion {
      position: fixed;
      top: 0;
      left: 0;
      width: 100vw;
      height: 100vh;
      background: radial-gradient(circle at center, transparent 0%, rgba(0,255,0,0.1) 50%, transparent 100%);
      mix-blend-mode: screen;
      animation: realityPulse 8s infinite;
      pointer-events: none;
      z-index: 0;
    }

    @@keyframes realityPulse {
      0%, 100% { transform: scale(1); opacity: 0.3; }
      50% { transform: scale(1.5); opacity: 0.7; }
    }

    /* Portal effects */
    .portal-ring {
      position: fixed;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      width: 200px;
      height: 200px;
      border: 4px solid var(--portal);
      border-radius: 50%;
      opacity: 0;
      pointer-events: none;
      filter: blur(4px);
      z-index: 2;
    }

    .portal-ring.active {
      animation: portalOpen 3s forwards;
    }

    @@keyframes portalOpen {
      0% { transform: translate(-50%, -50%) scale(0) rotate(0deg); opacity: 0; }
      50% { transform: translate(-50%, -50%) scale(1.5) rotate(180deg); opacity: 0.8; }
      100% { transform: translate(-50%, -50%) scale(0) rotate(360deg); opacity: 0; }
    }

    /* Enhanced terminal effects */
    .terminal {
      position: relative;
      overflow: hidden;
    }

    .terminal::before {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 2px;
      background: var(--fg);
      animation: terminalScan 2s linear infinite;
      opacity: 0.5;
    }

    @@keyframes terminalScan {
      0% { transform: translateY(-100%); }
      100% { transform: translateY(220px); }
    }

    /* Victory effects */
    .victory-effect {
      position: fixed;
      inset: 0;
      background: radial-gradient(circle at center, transparent, rgba(0,255,0,0.2));
      pointer-events: none;
      opacity: 0;
      z-index: 10;
    }

    .victory-effect.active {
      animation: victoryPulse 3s forwards;
    }

    @@keyframes victoryPulse {
      0% { opacity: 0; transform: scale(0); }
      50% { opacity: 1; transform: scale(1.5); }
      100% { opacity: 0; transform: scale(2); }
    }

    /* EPIC NEW EFFECTS */
    
    /* Mouse trail particles */
    .mouse-particle {
      position: fixed;
      width: 6px;
      height: 6px;
      background: var(--quantum1);
      border-radius: 50%;
      pointer-events: none;
      z-index: 9999;
      filter: blur(1px);
      animation: mouseTrail 1s ease-out forwards;
    }

    @@keyframes mouseTrail {
      0% { 
        opacity: 1; 
        transform: scale(1) rotate(0deg);
        filter: hue-rotate(0deg) blur(1px);
      }
      100% { 
        opacity: 0; 
        transform: scale(0) rotate(360deg);
        filter: hue-rotate(360deg) blur(3px);
      }
    }

    /* Seismic waves */
    .seismic-wave {
      position: fixed;
      top: 50%;
      left: 50%;
      width: 0;
      height: 0;
      border: 2px solid var(--alert);
      border-radius: 50%;
      transform: translate(-50%, -50%);
      pointer-events: none;
      z-index: 1000;
      animation: seismicPulse 2s ease-out forwards;
    }

    @@keyframes seismicPulse {
      0% { 
        width: 0; 
        height: 0; 
        opacity: 1;
        border-width: 4px;
      }
      100% { 
        width: 100vw; 
        height: 100vw; 
        opacity: 0;
        border-width: 1px;
      }
    }

    /* Matrix breaking effect */
    .matrix-break {
      position: fixed;
      top: 0;
      left: 0;
      width: 100vw;
      height: 100vh;
      background: repeating-linear-gradient(
        90deg,
        transparent 0%,
        rgba(0,255,0,0.1) 1%,
        transparent 2%
      );
      pointer-events: none;
      z-index: 1001;
      opacity: 0;
      animation: matrixBreak 0.5s ease-out forwards;
    }

    @@keyframes matrixBreak {
      0% { 
        opacity: 0; 
        transform: scale(0.5) rotate(0deg);
        filter: hue-rotate(0deg);
      }
      50% { 
        opacity: 1; 
        transform: scale(1.2) rotate(180deg);
        filter: hue-rotate(180deg);
      }
      100% { 
        opacity: 0; 
        transform: scale(2) rotate(360deg);
        filter: hue-rotate(360deg);
      }
    }

    /* Quantum tunneling effect */
    .quantum-tunnel {
      position: fixed;
      top: 0;
      left: 0;
      width: 100vw;
      height: 100vh;
      background: conic-gradient(
        from 0deg,
        transparent,
        var(--quantum1),
        transparent,
        var(--quantum2),
        transparent
      );
      pointer-events: none;
      z-index: 1002;
      opacity: 0;
      animation: quantumTunnel 1s ease-out forwards;
    }

    @@keyframes quantumTunnel {
      0% { 
        opacity: 0; 
        transform: scale(0) rotate(0deg);
        filter: blur(10px);
      }
      50% { 
        opacity: 0.8; 
        transform: scale(1) rotate(180deg);
        filter: blur(5px);
      }
      100% { 
        opacity: 0; 
        transform: scale(2) rotate(360deg);
        filter: blur(20px);
      }
    }

    /* Enhanced reality distortion */
    .reality-shatter {
      position: fixed;
      inset: 0;
      background: 
        radial-gradient(circle at 20% 20%, rgba(255,0,255,0.3) 0%, transparent 50%),
        radial-gradient(circle at 80% 80%, rgba(0,255,255,0.3) 0%, transparent 50%),
        radial-gradient(circle at 50% 50%, rgba(255,255,0,0.2) 0%, transparent 50%);
      mix-blend-mode: screen;
      pointer-events: none;
      z-index: 1003;
      opacity: 0;
      animation: realityShatter 0.8s ease-out forwards;
    }

    @@keyframes realityShatter {
      0% { 
        opacity: 0; 
        transform: scale(0.5) skew(0deg);
        filter: hue-rotate(0deg);
      }
      50% { 
        opacity: 1; 
        transform: scale(1.5) skew(20deg);
        filter: hue-rotate(180deg);
      }
      100% { 
        opacity: 0; 
        transform: scale(3) skew(0deg);
        filter: hue-rotate(360deg);
      }
    }

    /* Glitch text enhancement */
    .epic-glitch {
      position: fixed;
      color: var(--glitch1);
      font-family: monospace;
      font-weight: bold;
      text-shadow: 
        2px 0 var(--glitch2),
        -2px 0 var(--quantum1),
        0 2px var(--quantum2);
      pointer-events: none;
      z-index: 1004;
      animation: epicGlitch 0.3s infinite alternate;
    }

    @@keyframes epicGlitch {
      0% { 
        transform: translate(0) skew(0deg);
        text-shadow: 
          2px 0 var(--glitch2),
          -2px 0 var(--quantum1),
          0 2px var(--quantum2);
      }
      25% { 
        transform: translate(2px, -2px) skew(2deg);
        text-shadow: 
          -2px 0 var(--glitch1),
          2px 0 var(--quantum2),
          0 -2px var(--quantum1);
      }
      50% { 
        transform: translate(-2px, 2px) skew(-2deg);
        text-shadow: 
          0 2px var(--glitch2),
          2px -2px var(--quantum1),
          -2px 0 var(--quantum2);
      }
      75% { 
        transform: translate(1px, -1px) skew(1deg);
        text-shadow: 
          -1px 1px var(--glitch1),
          1px -1px var(--quantum2),
          0 1px var(--quantum1);
      }
      100% { 
        transform: translate(0) skew(0deg);
        text-shadow: 
          2px 0 var(--glitch2),
          -2px 0 var(--quantum1),
          0 2px var(--quantum2);
      }
    }

    /* Screen distortion effect */
    .screen-distortion {
      position: fixed;
      inset: 0;
      background: 
        repeating-linear-gradient(
          45deg,
          transparent 0%,
          rgba(255,0,255,0.1) 1%,
          transparent 2%
        );
      pointer-events: none;
      z-index: 1005;
      opacity: 0;
      animation: screenDistort 0.6s ease-out forwards;
    }

    @@keyframes screenDistort {
      0% { 
        opacity: 0; 
        transform: scale(1) rotate(0deg);
        filter: hue-rotate(0deg) contrast(1);
      }
      50% { 
        opacity: 1; 
        transform: scale(1.1) rotate(5deg);
        filter: hue-rotate(180deg) contrast(2);
      }
      100% { 
        opacity: 0; 
        transform: scale(1) rotate(0deg);
        filter: hue-rotate(360deg) contrast(1);
      }
    }
  </style>
</head>
<body>
<canvas id="ditherBG"></canvas>

<audio id="bgAudio" src="/img/cemetrygates.mp3" autoplay loop></audio>
<div class="flashOverlay"></div>
<canvas id="matrix"></canvas>
<div class="introLore" id="introLore">
  <div class="intro-text" style="--delay: 0s">
    <h1 style="color: var(--quantum1);">[ROOM 6 // NÚCLEO DEL CAOS]</h1>
  </div>
  <div class="intro-text" style="--delay: 2s">
    <p class="warning-text">ANOMALÍA 3%:- CUÁNTICA/&&CRÍTICA</p>
    <p>Núcleo inestable: 89% — tasa de ruptura exponencial.</p>
  </div>
  <div class="intro-text" style="--delay: 4s">
    <p>[RICK] Morty... esto no es un juego.</p>
    <p>[RICK] El hacker está dentro del sistema. Ya no controlamos nada.</p>
  </div>
  <div class="intro-text" style="--delay: 6s">
    <p>[MORTY] ¿¡Qué es eso!? ¡El código se mueve como si estuviera vivo!</p>
    <p>[RICK] Es el núcleo, reescribiéndose a sí mismo. Si no lo detenemos, colapsa todo.</p>
  </div>
  <div class="intro-text" style="--delay: 8s">
    <p class="warning-text">[SISTEMA] PROTOCOLO DE CONTENCIÓN ACTIVADO</p>
    <p>[SISTEMA] Reconfigurando nodos cuánticos...</p>
  </div>
  <div class="intro-text" style="--delay: 10s">
    <p>[RICK] Escuchá: cada luz encendida es un acceso abierto del hacker.</p>
    <p>[RICK] Cerralas antes de que el sistema se autodestruya.</p>
  </div>
  <div class="intro-text" style="--delay: 12s">
    <p class="warning-text">INICIANDO SECUENCIA EN 3... 2... 1...</p>
  </div>
</div>
<div class="quantum-flash" id="quantumFlash"></div>
<div class="instrucciones">
  <h2>NÚCLEO EN COLAPSO</h2>
  <p><strong>[RICK]</strong> Morty, esta es la zona cero. Las leyes de la física dejaron de tener sentido. El código se reescribe, los bugs evolucionan. No hay reglas… solo caos.</p>
  <p><strong>OBJETIVO:</strong> Interceptá los <span style="color:#ff66cc">CUADRADOS ACTIVOS</span> antes de que el sistema caiga. Cada acierto estabiliza el núcleo. Cada error lo corrompe más.</p>
  <p><strong>5 puntos o menos… y el multiverso colapsa.</strong> Tenés 60 segundos. Empezá a jugar. Ahora.</p>
</div>
<div class="grid" id="grid"></div>
<div id="score">Puntaje: 0</div>
<div class="terminal" id="terminal"></div>
<div class="quantum-field"></div>
<div class="reality-distortion"></div>
<div class="portal-ring"></div>
<div class="victory-effect"></div>
<script src="~/js/site.js"></script>
<script>
window.addEventListener('DOMContentLoaded', () => {
  const consoleDiv = document.getElementById('console');
  const quantumFlash = document.getElementById('quantumFlash');
  
  // Quantum flash effects
  function triggerQuantumFlash() {
    quantumFlash.style.opacity = '0.8';
    setTimeout(() => {
      quantumFlash.style.opacity = '0';
    }, 100);
  }

  // Trigger quantum flashes randomly
  setInterval(triggerQuantumFlash, 2000 + Math.random() * 3000);

  // Add reality break effect to certain messages
  document.querySelectorAll('.warning-text').forEach(el => {
    el.addEventListener('mouseover', () => {
      document.body.classList.add('reality-break');
      triggerQuantumFlash();
    });
    el.addEventListener('mouseout', () => {
      document.body.classList.remove('reality-break');
    });
  });

  const intro = [
    "[NÚCLEO] Iniciando diagnóstico de estabilidad...",
    "[NÚCLEO] Detectando fluctuaciones cuánticas...",
    "[RICK] *burp* El núcleo está vivo, Morty...",
    "[RICK] Cada error es una grieta en la realidad.",
    "[SISTEMA] ADVERTENCIA: Integridad dimensional al 31%",
    "[MORTY] ¡R-rick! ¡Las luces están parpadeando solas!",
    "[RICK] ¡Son portales Morty! ¡Portales microscópicos!",
    "[SISTEMA] Activando matriz de contención cuántica...",
    "[PC] Probabilidad de supervivencia: 13.7%",
    "[RICK] ¡Cállate, máquina estúpida! *burp*",
    "[SISTEMA] ALERTA: Colapso del núcleo en progreso",
    "[RICK] ¡RÁPIDO MORTY! ¡SELLA ESAS GRIETAS!",
    "[NÚCLEO] Iniciando prueba de estabilidad..."
  ];

  let i = 0;
  const escribirIntro = setInterval(() => {
    if (i < intro.length) {
      const className = i === 4 ? 'warning-text' : 
                       i === 10 ? 'reality-break' : '';
      consoleDiv.innerHTML += `<div class="${className}">> ${intro[i]}</div>`;
      consoleDiv.scrollTop = consoleDiv.scrollHeight;
      
      if (i === 4 || i === 10) {
        triggerQuantumFlash();
        document.body.classList.add('reality-break');
        setTimeout(() => document.body.classList.remove('reality-break'), 500);
      }
      i++;
    } else {
      clearInterval(escribirIntro);
      iniciarCaos();
    }
  }, 1000);
});
const canvas = document.getElementById('matrix');
const ctx = canvas.getContext('2d');
canvas.width = window.innerWidth;
canvas.height = window.innerHeight;
const cols = Math.floor(canvas.width / 20);
const ypos = Array(cols).fill(0);
function matrixRain() {
  ctx.fillStyle = '#0003';
  ctx.fillRect(0, 0, canvas.width, canvas.height);
  ctx.fillStyle = '#0ff';
  ctx.font = '15pt monospace';
  ypos.forEach((y, ind) => {
    const text = String.fromCharCode(Math.random() * 128);
    const x = ind * 20;
    ctx.fillText(text, x, y);
    ypos[ind] = y > 100 + Math.random() * 10000 ? 0 : y + 20;
  });
}
setInterval(matrixRain, 50);

const grid = document.getElementById("grid");
const scoreDisplay = document.getElementById("score");
const terminal = document.getElementById("terminal");
let score = 0, tiempo = 60, intervalo, finalizado = false, celdaActiva = -1;
const frases = [
  "¡Apuntá mejor Morty!",
  "¡Estás fallando demasiado!",
  "El núcleo está cada vez más inestable...",
  "Esa luz rosa no es decoración, Morty, es radiación!",
  "¡20 puntos o morimos bugueados!"
];
function crearCeldas() {
  for (let i = 0; i < 25; i++) {
    const cell = document.createElement("div");
    cell.className = "cell";
    cell.id = `cell${i}`;
    cell.onclick = () => {
      if (finalizado) return;
      
      // Enhanced click effects
      enhanceCellClick(cell);
      
      if (cell.classList.contains("activo")) {
        score++;
        terminal.innerText += `✔️ Click correcto en ${cell.id}\n`;
        
        // Trigger epic effects on correct clicks
        if (Math.random() < 0.3) triggerSeismicWave();
        if (Math.random() < 0.2) triggerMatrixBreak();
        if (Math.random() < 0.15) triggerQuantumTunnel();
      } else {
        score--;
        terminal.innerText += `❌ Click fallado en ${cell.id}\n`;
        
        // Trigger different effects on wrong clicks
        if (Math.random() < 0.4) triggerRealityShatter();
        if (Math.random() < 0.3) triggerScreenDistortion();
        if (Math.random() < 0.25) createEpicGlitch();
      }
      actualizar();
    };
    grid.appendChild(cell);
  }
}
function activarRandom() {
  document.querySelectorAll('.cell').forEach(c => c.classList.remove('activo'));
  let r;
  do { r = Math.floor(Math.random() * 25); } while (r === celdaActiva);
  celdaActiva = r;
  const nueva = document.getElementById(`cell${r}`);
  nueva.classList.add("activo");
  setTimeout(() => {
    if (nueva.classList.contains("activo")) {
      nueva.classList.remove("activo");
      celdaActiva = -1;
    }
  }, 900); 
}

function actualizar() {
  scoreDisplay.innerText = `Puntaje: ${score}`;
  if (score >= 5 && !finalizado) {
    finalizado = true;
    clearInterval(intervalo);
    document.body.innerHTML = `
  <div id="finalConsola" style="color: #ffc0cb; font-family: 'Courier New', monospace; padding: 40px; font-size: 16px; white-space: pre-wrap; background-color: black; text-shadow: 0 0 5px #ff99cc;">
──── ୨ৎ SISTEMA C-137 ────
[ESTADO] Conexión establecida con el Núcleo Multiversal

>>> Rick: Morty... lo que estás viendo no es solo código.
>>> Rick: Es la red viva de todas las realidades... soñando en loops infinitos.
>>> Morty: ¿Entonces qué hay en la siguiente habitación?
>>> Rick: Algo peor que errores, Morty... una conciencia sin límites.
>>> Rick: El sistema aprendió de nosotros. Se adorna. Se emociona.
>>> Morty: ¿Rick... me estás diciendo que el código siente?
>>> Rick: Sí, Morty. Y nos está observando. Nos está decorando...
>>> Rick: Si no lo detenemos, va a compilar nuestra historia... con glitter.

>>> Rick: En la próxima sala... no hay tutoriales.
>>> Rick: Solo decisiones. Y consecuencias.

[⚠] Fluctuaciones coquettex detectadas.
[INICIO DE ROOM 7 INMINENTE...]
──── ୨ৎ ────────────────────────
</div>`;
fetch('/Home/CompleteRoom/6', {
    method: 'POST',
    headers: {
        'Content-Type': 'application/json'
    }
})
.then(response => {
    if (!response.ok) throw new Error('Error al completar la sala');
    return response.json();
})
.then(() => {
    setTimeout(() => {
        window.location.href = '/Home/Room7codex';
    }, 12000);
})
.catch(() => {
    setTimeout(() => {
        window.location.href = '/Home/Room7codex';
    }, 12000);
});    }
}
function iniciarCaos() {
  crearCeldas();
  intervalo = setInterval(() => {
    activarRandom();
    tiempo--;
    if (tiempo % 10 === 0 && tiempo > 0) {
      terminal.innerText += `\nRick: ${frases[Math.floor(Math.random() * frases.length)]}`;
    }
    if (tiempo <= 0 && !finalizado) {
      clearInterval(intervalo);
      terminal.innerHTML += "\n💥 Fracaso. El núcleo colapsó. Reiniciando...";
      document.body.classList.add("glitch");
      setTimeout(() => location.reload(), 5000);
    }
  }, 700);
}
setTimeout(iniciarCaos, 10500);
function locuraVisual() {
  const gridElement = document.querySelector('.grid');
  const scaleX = (Math.random() * 4 + 1).toFixed(2);
  const scaleY = (Math.random() * 2 + 0.3).toFixed(2);
  const rotate = (Math.random() * 30 - 15).toFixed(2);
  const skewX = (Math.random() * 20 - 10).toFixed(2);
  const skewY = (Math.random() * 20 - 10).toFixed(2);

  gridElement.style.transition = 'transform 0.4s ease';
  gridElement.style.transform = `scaleX(${scaleX}) scaleY(${scaleY}) rotate(${rotate}deg) skew(${skewX}deg, ${skewY}deg)`;
  gridElement.classList.add('glitch');
  setTimeout(() => {
    gridElement.style.transform = 'scaleX(1) scaleY(1) rotate(0deg) skew(0deg, 0deg)';
    gridElement.classList.remove('glitch');
  }, 1000);

  const flash = document.createElement('div');
  flash.style.position = 'fixed';
  flash.style.top = '0';
  flash.style.left = '0';
  flash.style.width = '100vw';
  flash.style.height = '100vh';
  flash.style.zIndex = '999';
  flash.style.background = `rgba(${Math.floor(Math.random()*255)},${Math.floor(Math.random()*255)},${Math.floor(Math.random()*255)},0.8)`;
  flash.style.transition = 'opacity 0.2s';
  document.body.appendChild(flash);
  setTimeout(() => {
    flash.style.opacity = '0';
    setTimeout(() => document.body.removeChild(flash), 200);
  }, 100);

  for (let i = 0; i < 3; i++) {
    const clone = gridElement.cloneNode(true);
    clone.style.position = 'fixed';
    clone.style.opacity = '0.1';
    clone.style.pointerEvents = 'none';
    clone.style.zIndex = '100';
    clone.style.top = `${Math.random() * 80}%`;
    clone.style.left = `${Math.random() * 80}%`;
    clone.style.transform = `scale(${Math.random() * 2 + 0.5}) rotate(${Math.random() * 360}deg)`;
    document.body.appendChild(clone);
    setTimeout(() => document.body.removeChild(clone), 800);
  }
}

function glitchRandom() {
  const glitch = document.createElement('div');
  glitch.className = 'glitch';
const glitchTexts = [
  '✶ ERROR DE REFERENCIA :: PARÁMETRO "coquettex" NO DEFINIDO',
  '𖹭 FLUCTUACIÓN ESTÉTICA DETECTADA :: ORIGEN DESCONOCIDO',
  '୨ৎ INESTABILIDAD ROSA EN AUMENTO :: VALORES SALIENDO DE RANGO',
  '✦ ALGUNA ENTIDAD SE ACERCA :: SIGNATURA: ✧ DESCONOCIDA ✧',
  '𓆩 COLAPSO DE LO LÓGICO :: APARICIÓN DE TRAZAS SIMBÓLICAS 𓆪',
  '𖦹 LA SIMULACIÓN EMPIEZA A SENTIR :: SISTEMA NO LO SOPORTA',
  '✶ MODO COQUETTEX PENDIENTE :: SEÑALES PRECURSORAS DETECTADAS',
  '⋆ ANOMALÍA C-137 FLUCTUANTE :: DECODIFICACIÓN ESTÉTICA FALLIDA',
  '✧ LA REALIDAD ESTÁ EMPEZANDO A DECORARSE SIN CONSENTIMIENTO ✧',
  '୨ৎ ERROR EN LA MATRIZ :: EL PATRÓN ES… DEMASIADO HERMOSO'
];

glitch.innerText = glitchTexts[Math.floor(Math.random() * glitchTexts.length)];
  glitch.style.position = 'fixed';
  glitch.style.top = `${Math.random() * 80 + 10}%`;
  glitch.style.left = `${Math.random() * 80 + 10}%`;
  glitch.style.color = '#ff00c8';
  glitch.style.fontSize = `${Math.floor(Math.random() * 40 + 20)}px`;
  glitch.style.zIndex = '1000';
  glitch.style.animation = 'glitchFlash 0.2s infinite alternate';
  document.body.appendChild(glitch);
  setTimeout(() => document.body.removeChild(glitch), 1000);
}

function invocarPortal() {
  const portal = document.createElement('img');
  portal.src = '/img/anuncio9.gif';
  portal.style.position = 'fixed';
  portal.style.top = `${Math.random() * 70 + 10}%`;
  portal.style.left = `${Math.random() * 70 + 10}%`;
  portal.style.width = '200px';
  portal.style.zIndex = '10000';
  portal.style.opacity = '0.8';
  portal.style.pointerEvents = 'none';
  document.body.appendChild(portal);

  const overlay = document.createElement('div');
  overlay.style.position = 'fixed';
  overlay.style.top = 0;
  overlay.style.left = 0;
  overlay.style.width = '100vw';
  overlay.style.height = '100vh';
  overlay.style.zIndex = '9999';
  overlay.style.background = 'radial-gradient(circle, rgba(255,0,255,0.2), rgba(0,255,255,0.3), rgba(255,255,0,0.2))';
  overlay.style.animation = 'portalFlash 1s infinite alternate';
  document.body.appendChild(overlay);

  setTimeout(() => {
    document.body.removeChild(portal);
    document.body.removeChild(overlay);
  }, 3000);
}

function gridDualidad() {
  const grid = document.querySelectorAll('.cell');
  grid.forEach(cell => {
    const dual = Math.random() > 0.5;
    cell.style.transition = 'all 0.3s ease';
    cell.style.background = dual ? '#ff0033' : '#00ffff';
    cell.style.boxShadow = dual ? '0 0 12px #ff0033' : '0 0 12px #00ffff';
    cell.style.transform = `rotate(${Math.random() * 40 - 20}deg)`;
  });
  setTimeout(() => {
    grid.forEach(cell => {
      cell.style.background = '';
      cell.style.boxShadow = '';
      cell.style.transform = 'rotate(0deg)';
    });
  }, 3000);
}

setInterval(locuraVisual, 5000);
setInterval(() => {
  if (Math.random() < 0.4) glitchRandom();
}, 3000);
setInterval(() => {
  if (Math.random() < 0.25) invocarPortal();
}, 8000);
setInterval(() => {
  if (Math.random() < 0.3) gridDualidad();
}, 7000);

function createQuantumParticles() {
    const field = document.querySelector('.quantum-field');
    for (let i = 0; i < 50; i++) {
        const particle = document.createElement('div');
        particle.className = 'quantum-particle';
        particle.style.left = Math.random() * window.innerWidth + 'px';
        particle.style.top = Math.random() * window.innerHeight + 'px';
        particle.style.setProperty('--moveX', (Math.random() * 200 - 100) + 'px');
        particle.style.setProperty('--moveY', (Math.random() * 200 - 100) + 'px');
        field.appendChild(particle);
        
        // Remove particle after animation
        particle.addEventListener('animationend', () => particle.remove());
    }
    setTimeout(createQuantumParticles, 2000);
}

function showVictoryEffects() {
    const portal = document.querySelector('.portal-ring');
    const victory = document.querySelector('.victory-effect');
    portal.classList.add('active');
    victory.classList.add('active');
    
    // Create extra quantum particles for victory
    for (let i = 0; i < 100; i++) {
        setTimeout(() => {
            const particle = document.createElement('div');
            particle.className = 'quantum-particle';
            particle.style.left = '50%';
            particle.style.top = '50%';
            particle.style.setProperty('--moveX', (Math.random() * 400 - 200) + 'px');
            particle.style.setProperty('--moveY', (Math.random() * 400 - 200) + 'px');
            document.querySelector('.quantum-field').appendChild(particle);
        }, i * 50);
    }
}

// Initialize quantum particles
createQuantumParticles();

// Add to your existing victory condition
if (score >= 5) {
    showVictoryEffects();
    // ... rest of your victory code ...
}

// EPIC NEW EFFECT FUNCTIONS

// Mouse trail particles
function createMouseTrail(e) {
  if (Math.random() < 0.3) {
    const particle = document.createElement('div');
    particle.className = 'mouse-particle';
    particle.style.left = e.clientX + 'px';
    particle.style.top = e.clientY + 'px';
    particle.style.background = `hsl(${Math.random() * 360}, 100%, 50%)`;
    document.body.appendChild(particle);
    
    setTimeout(() => particle.remove(), 1000);
  }
}

// Seismic wave effect
function triggerSeismicWave() {
  const wave = document.createElement('div');
  wave.className = 'seismic-wave';
  document.body.appendChild(wave);
  
  setTimeout(() => wave.remove(), 2000);
}

// Matrix breaking effect
function triggerMatrixBreak() {
  const matrix = document.createElement('div');
  matrix.className = 'matrix-break';
  document.body.appendChild(matrix);
  
  setTimeout(() => matrix.remove(), 500);
}

// Quantum tunneling effect
function triggerQuantumTunnel() {
  const tunnel = document.createElement('div');
  tunnel.className = 'quantum-tunnel';
  document.body.appendChild(tunnel);
  
  setTimeout(() => tunnel.remove(), 1000);
}

// Reality shatter effect
function triggerRealityShatter() {
  const shatter = document.createElement('div');
  shatter.className = 'reality-shatter';
  document.body.appendChild(shatter);
  
  setTimeout(() => shatter.remove(), 800);
}

// Epic glitch text
function createEpicGlitch() {
  const glitchTexts = [
    '✶ QUANTUM FLUX DETECTED :: REALITY BREAKING ✶',
    '𖹭 MATRIX CORRUPTION :: DIMENSIONAL SHIFT IN PROGRESS 𖹭',
    '୨ৎ NUCLEAR FUSION :: CODE MELTING INTO CHAOS ୨ৎ',
    '✦ SPACETIME ANOMALY :: THE GAME IS PLAYING US ✦',
    '𓆩 QUANTUM ENTANGLEMENT :: ALL REALITIES MERGING 𓆪',
    '𖦹 COSMIC GLITCH :: THE UNIVERSE IS DEBUGGING ITSELF 𖦹',
    '✶ NEURAL NETWORK OVERLOAD :: CONSCIOUSNESS EXPANDING ✶',
    '⋆ DIMENSIONAL BREACH :: INFINITE POSSIBILITIES UNLEASHED ⋆',
    '✧ QUANTUM SUPERPOSITION :: WE ARE ALL WINNING AND LOSING ✧',
    '୨ৎ REALITY SIMULATION :: THE MATRIX HAS A MATRIX ୨ৎ'
  ];
  
  const glitch = document.createElement('div');
  glitch.className = 'epic-glitch';
  glitch.innerText = glitchTexts[Math.floor(Math.random() * glitchTexts.length)];
  glitch.style.top = `${Math.random() * 70 + 15}%`;
  glitch.style.left = `${Math.random() * 70 + 15}%`;
  glitch.style.fontSize = `${Math.floor(Math.random() * 30 + 20)}px`;
  document.body.appendChild(glitch);
  
  setTimeout(() => glitch.remove(), 2000);
}

// Screen distortion effect
function triggerScreenDistortion() {
  const distortion = document.createElement('div');
  distortion.className = 'screen-distortion';
  document.body.appendChild(distortion);
  
  setTimeout(() => distortion.remove(), 600);
}

// Enhanced cell click effects
function enhanceCellClick(cell) {
  // Create explosion effect
  for (let i = 0; i < 8; i++) {
    const particle = document.createElement('div');
    particle.style.position = 'absolute';
    particle.style.width = '4px';
    particle.style.height = '4px';
    particle.style.background = cell.classList.contains('activo') ? '#00ff88' : '#ff0066';
    particle.style.borderRadius = '50%';
    particle.style.left = '50%';
    particle.style.top = '50%';
    particle.style.transform = 'translate(-50%, -50%)';
    particle.style.pointerEvents = 'none';
    particle.style.zIndex = '1000';
    
    const angle = (i * 45) * Math.PI / 180;
    const distance = 50;
    const animation = particle.animate([
      { 
        transform: 'translate(-50%, -50%) scale(1)',
        opacity: 1
      },
      { 
        transform: `translate(calc(-50% + ${Math.cos(angle) * distance}px), calc(-50% + ${Math.sin(angle) * distance}px)) scale(0)`,
        opacity: 0
      }
    ], {
      duration: 500,
      easing: 'ease-out'
    });
    
    cell.appendChild(particle);
    animation.onfinish = () => particle.remove();
  }
  
  // Trigger screen shake
  document.body.style.animation = 'none';
  document.body.offsetHeight; // Trigger reflow
  document.body.style.animation = 'realityGlitch 0.2s ease-out';
  setTimeout(() => {
    document.body.style.animation = '';
  }, 200);
}

// Add mouse trail effect
document.addEventListener('mousemove', createMouseTrail);

// Enhanced effect intervals
setInterval(() => {
  if (Math.random() < 0.4) glitchRandom();
}, 3000);

setInterval(() => {
  if (Math.random() < 0.25) invocarPortal();
}, 8000);

setInterval(() => {
  if (Math.random() < 0.3) gridDualidad();
}, 7000);

// NEW EPIC EFFECT INTERVALS
setInterval(() => {
  if (Math.random() < 0.2) triggerSeismicWave();
}, 4000);

setInterval(() => {
  if (Math.random() < 0.15) triggerMatrixBreak();
}, 6000);

setInterval(() => {
  if (Math.random() < 0.1) triggerQuantumTunnel();
}, 8000);

setInterval(() => {
  if (Math.random() < 0.25) triggerRealityShatter();
}, 5000);

setInterval(() => {
  if (Math.random() < 0.3) createEpicGlitch();
}, 3500);

setInterval(() => {
  if (Math.random() < 0.2) triggerScreenDistortion();
}, 4500);

function reemplazarNombre(texto) {
    return texto.replace(/Morty/g, window.nombreJugador || 'Morty');
}
window.nombreJugador = 'Morty';
window.obtenerNombreJugador(function(nombre) {
    window.nombreJugador = nombre;
    // Reemplazar en los diálogos de la terminal
    var terminal = document.querySelector('.terminal');
    if (terminal) terminal.innerHTML = reemplazarNombre(terminal.innerHTML);
});
</script>

@Html.Partial("_NavMenu")
</body>
</html>