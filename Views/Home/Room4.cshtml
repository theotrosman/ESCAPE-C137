@{
    Layout = null;
}
<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <title>Room 4 - Memory Collapse</title>
    <style>
        body {
            background-color: black;
            color: #00ff00;
            font-family: monospace;
            animation: shake 0.5s infinite, flash 2s infinite alternate;
            overflow-x: hidden;
            transition: background 0.5s, color 0.5s;
        }

        @@keyframes shake {
            0% { transform: translate(1px, 1px); }
            25% { transform: translate(-1px, -2px); }
            50% { transform: translate(-3px, 1px); }
            75% { transform: translate(2px, 2px); }
            100% { transform: translate(1px, -1px); }
        }

        @@keyframes flash {
            from { background-color: black; }
            to { background-color: #222; }
        }

        .console {
            background: rgba(0,255,0,0.1);
            border: 1px solid #00ff00;
            padding: 20px;
            margin-bottom: 20px;
            white-space: pre-line;
        }

        .log-attack {
            animation: logFlash 0.5s steps(1) infinite alternate;
        }

        @@keyframes logFlash {
            from { background-color: black; }
            to { background-color: darkred; color: #ff5555; }
        }

        .memory-dump {
            display: grid;
            grid-template-columns: repeat(6, 1fr);
            gap: 10px;
        }

        .cell {
            background: rgba(0,255,0,0.1);
            border: 1px solid #00ff00;
            padding: 10px;
            text-align: center;
            cursor: pointer;
        }

        .cell:hover {
            background: rgba(0,255,0,0.3);
        }

        #sequence {
            margin-top: 20px;
            display: flex;
            flex-wrap: wrap;
            gap: 10px;
        }

        .slot {
            border: 1px dashed #00ff00;
            width: 80px;
            height: 40px;
            display: flex;
            justify-content: center;
            align-items: center;
        }

        #gitSection {
            display: none;
            margin-top: 30px;
            text-align: center;
        }

        #gitSection input {
            background: black;
            border: 1px solid #00ff00;
            color: #00ff00;
            font-family: monospace;
            margin-bottom: 5px;
            width: 100%;
        }

        #gitSection button {
            background-color: #00ff00;
            color: black;
            font-family: monospace;
            font-size: 16px;
            padding: 10px 20px;
            border: none;
            cursor: pointer;
            transition: transform 0.2s, background-color 0.3s;
        }

        #gitSection button:hover {
            transform: scale(1.1);
            background-color: #33ff33;
        }

        #error {
            color: red;
            display: none;
            font-weight: bold;
        }

        #gifRick {
            position: fixed;
            bottom: 10px;
            left: 10px;
            width: 150px;
            z-index: 999;
        }

        .attack {
            background-color: red !important;
            color: black !important;
            animation: none !important;
        }

        #timer {
            font-size: 32px;
            text-align: center;
            margin-bottom: 20px;
        }

        body::after {
            content: "REALIDADES SUPERPUESTAS DETECTADAS";
            position: fixed;
            top: 10px;
            right: 10px;
            color: #ff00ff;
            font-size: 12px;
            font-family: monospace;
            opacity: 0.3;
            animation: pulse 3s infinite;
        }

        @@keyframes pulse {
            0% { opacity: 0.2; }
            50% { opacity: 0.6; }
            100% { opacity: 0.2; }
        }
    </style>
</head>
<body>

<audio autoplay loop>
    <source src="/img/rick-theme.mp3" type="audio/mpeg">
</audio>

<div id="timer">Tiempo restante: <span id="countdown">30</span>s</div>

<div class="console" id="console">
[Rick]: Morty... escuchá, este código está lleno de bugs.
[Rick]: Estoy atrapado en la RAM. Hay bloques de memoria rotos...
[Rick]: Tenés que arrastrarlos en este orden exacto:
[Rick]: T-R-A-S-C-E-N-D-E-R-_-R-E-A-L-I-D-A-D
[Rick]: Si lo hacés bien, después vas a tener que ejecutar los comandos de git...
[Rick]: ¡Si te equivocás, el multiverso colapsa, Morty!
</div>

<div class="memory-dump" id="dump"></div>
<div id="sequence"></div>

<div id="gitSection">
    <h2>SUBIR REALIDAD A GITHUB</h2>
    <input id="cmd1" placeholder="Comando 1">
    <input id="cmd2" placeholder="Comando 2">
    <input id="cmd3" placeholder="Comando 3">
    <button onclick="checkGit()">⬆️ UPLOAD REALITY</button>
    <div id="error">¡Fallo crítico! Reiniciando RAM...</div>
</div>

<script>
    let dragged;
    const glitch = new Audio('/audio-glitch.mp3');
    const correctOrder = ["TR", "A", "S", "C", "E", "ND", "ER", "_", "RE", "AL", "ID", "AD"];
    let pieces = [...correctOrder].sort(() => Math.random() - 0.5);
    const dump = document.getElementById("dump");
    const sequence = document.getElementById("sequence");
    const consoleBox = document.getElementById("console");

    function shuffleBlocks() {
        dump.innerHTML = "";
        pieces = [...correctOrder].sort(() => Math.random() - 0.5);
        pieces.forEach(text => {
            const div = document.createElement("div");
            div.className = "cell";
            div.textContent = text;
            div.draggable = true;
            div.addEventListener('dragstart', e => dragged = e.target);
            dump.appendChild(div);
        });
    }

    function fakeLogAttack() {
        consoleBox.classList.add("log-attack");
        consoleBox.textContent = "[RICK_LOG] ALERTA: ALTERACIÓN TEMPORAL DETECTADA\n[RICK_LOG] POSIBLE FUSIÓN DE REALIDADES\n...";
        setTimeout(() => {
            consoleBox.classList.remove("log-attack");
            consoleBox.textContent = `[Rick]: Morty... escuchá, este código está lleno de bugs.\n[Rick]: Estoy atrapado en la RAM. Hay bloques de memoria rotos...\n[Rick]: Tenés que arrastrarlos en este orden exacto:\n[Rick]: T-R-A-S-C-E-N-D-E-R-_-R-E-A-L-I-D-A-D\n[Rick]: Si lo hacés bien, después vas a tener que ejecutar los comandos de git...\n[Rick]: ¡Si te equivocás, el multiverso colapsa, Morty!`;
        }, 3000);
    }

    shuffleBlocks();
    setInterval(shuffleBlocks, 10000);
    setInterval(fakeLogAttack, 30000);

    for (let i = 0; i < correctOrder.length; i++) {
        const slot = document.createElement("div");
        slot.className = "slot";
        slot.ondrop = drop;
        slot.ondragover = e => e.preventDefault();
        sequence.appendChild(slot);
    }

    function drop(e) {
        e.preventDefault();
        if (!e.target.textContent) {
            e.target.textContent = dragged.textContent;
            dragged.remove();
            checkCompletion();
        } else {
            glitch.play();
        }
    }

    function checkCompletion() {
        const current = Array.from(document.querySelectorAll('.slot')).map(s => s.textContent);
        if (current.includes("") || current.length < correctOrder.length) return;
        if (current.every((val, i) => val === correctOrder[i])) {
            document.getElementById("gitSection").style.display = "block";
            document.getElementById("console").textContent += "\n[Rick]: Bien Morty... Ahora GIT o nos vamos a pique.";
        } else {
            document.body.classList.add("attack");
            document.getElementById("console").textContent = "[SYSTEM LOG ATTACK DETECTED]\n[FATAL MEMORY CORRUPTION]\n[RESTARTING...]";
            setTimeout(() => location.reload(), 3000);
        }
    }

    function checkGit() {
        const cmd1 = document.getElementById("cmd1").value.trim();
        const cmd2 = document.getElementById("cmd2").value.trim();
        const cmd3 = document.getElementById("cmd3").value.trim();
        const correct = ["git add .", "git commit -m \"upload rick\"", "git push"];
        if (cmd1 === correct[0] && cmd2 === correct[1] && cmd3 === correct[2]) {
            window.location.href = "/Home/Room5";
        } else {
            document.body.classList.add("attack");
            document.getElementById("console").textContent = "[GIT UPLOAD FAILED]\n[REALITY BREACH]\n[RESTARTING SESSION...]";
            setTimeout(() => location.reload(), 6000);
        }
    }

    // Countdown Timer
    let timeLeft = 60;
    const countdownEl = document.getElementById("countdown");
    const timer = setInterval(() => {
        timeLeft--;
        countdownEl.textContent = timeLeft;
        if (timeLeft <= 0) {
            clearInterval(timer);
            document.body.classList.add("attack");
            document.getElementById("console").textContent = "[TIMEOUT]\n[REALITY DECAY INITIATED]\n[REBOOTING MEMORY...]";
            setTimeout(() => location.reload(), 3000);
        }
    }, 1000);
</script>

</body>
</html>