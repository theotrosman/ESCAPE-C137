@{
    Layout = null;
}
<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Room 9 - MultiDimensional Scan (Escape Room Rick & Morty)</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/tracking.js/1.1.3/tracking-min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/tracking.js/1.1.3/data/colors.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/howler/2.2.3/howler.min.js"></script>
    <style>
        :root {
            --neon-green: #39ff14;
            --neon-blue: #00ffff;
            --neon-red: #ff0000;
            --neon-purple: #ff00ff;
            --portal-color: #66ff99;
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            background: #000;
            color: var(--neon-green);
            font-family: 'Courier New', monospace;
            min-height: 100vh;
            overflow: hidden;
            position: relative;
        }

        .container {
            position: relative;
            z-index: 2;
            width: 100%;
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
            display: flex;
            flex-direction: column;
            align-items: center;
            min-height: 100vh;
        }

        .title {
            font-size: clamp(2em, 5vw, 3em);
            margin-bottom: 1em;
            text-align: center;
            text-shadow: 0 0 10px var(--neon-green);
            animation: glitch 1s infinite;
        }

        .camera-container {
            position: relative;
            width: 100%;
            max-width: 640px;
            margin: 20px auto;
            border: 2px solid var(--neon-green);
            box-shadow: 0 0 20px rgba(57, 255, 20, 0.3);
            overflow: hidden;
            display: none;
        }

        #videoElement {
            width: 100%;
            height: auto;
            display: block;
        }

        .overlay {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            pointer-events: none;
            border: 2px solid var(--neon-green);
            box-shadow: inset 0 0 20px rgba(57, 255, 20, 0.3);
        }

        .scanner-line {
            position: absolute;
            width: 100%;
            height: 2px;
            background: var(--neon-green);
            animation: scan 2s linear infinite;
            box-shadow: 0 0 10px var(--neon-green);
        }

        @@keyframes scan {
            0% { top: 0; }
            100% { top: 100%; }
        }

        .console {
            background: rgba(0, 20, 0, 0.8);
            border: 1px solid var(--neon-green);
            padding: 20px;
            margin: 20px 0;
            width: 100%;
            max-width: 800px;
            height: 200px;
            overflow-y: auto;
            font-size: 1.2em;
            font-family: 'Courier New', monospace;
            position: relative;
        }

        .console::-webkit-scrollbar {
            width: 10px;
            background: rgba(0, 20, 0, 0.8);
        }

        .console::-webkit-scrollbar-thumb {
            background: var(--neon-green);
            border-radius: 5px;
        }

        .fallback-container {
            display: none;
            grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
            gap: 20px;
            width: 100%;
            max-width: 800px;
            margin: 20px auto;
            padding: 20px;
        }

        .color-button {
            padding: 20px;
            border: none;
            border-radius: 10px;
            font-size: 1.2em;
            cursor: pointer;
            transition: all 0.3s ease;
            text-shadow: 0 0 5px rgba(0, 0, 0, 0.5);
            position: relative;
            overflow: hidden;
        }

        .color-button::before {
            content: '';
            position: absolute;
            top: -50%;
            left: -50%;
            width: 200%;
            height: 200%;
            background: linear-gradient(45deg, transparent, rgba(255,255,255,0.1), transparent);
            transform: rotate(45deg);
            animation: shine 3s infinite;
        }

        @@keyframes shine {
            0% { transform: translateX(-100%) rotate(45deg); }
            100% { transform: translateX(100%) rotate(45deg); }
        }

        .color-button[data-color="red"] { background: var(--neon-red); }
        .color-button[data-color="blue"] { background: var(--neon-blue); }
        .color-button[data-color="green"] { background: var(--neon-green); }

        .portal-effect {
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%) scale(0);
            width: 300px;
            height: 300px;
            background: conic-gradient(
                from 0deg,
                var(--portal-color),
                var(--neon-blue),
                var(--portal-color)
            );
            border-radius: 50%;
            filter: blur(20px);
            opacity: 0;
            transition: all 1s ease;
            z-index: 1000;
        }

        .portal-effect.active {
            transform: translate(-50%, -50%) scale(1);
            opacity: 1;
            animation: portalPulse 2s infinite;
        }

        @@keyframes portalPulse {
            0% { transform: translate(-50%, -50%) scale(1); filter: blur(20px); }
            50% { transform: translate(-50%, -50%) scale(1.2); filter: blur(30px); }
            100% { transform: translate(-50%, -50%) scale(1); filter: blur(20px); }
        }

        .glitch-overlay {
            position: fixed;
            inset: 0;
            background: transparent;
            pointer-events: none;
            z-index: 9999;
            mix-blend-mode: difference;
            display: none;
        }

        .success-message {
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            font-size: 2em;
            color: var(--neon-blue);
            text-align: center;
            opacity: 0;
            transition: all 0.5s ease;
            z-index: 1001;
        }

        .success-message.show {
            opacity: 1;
        }

        .loader {
            display: none;
            position: fixed;
            inset: 0;
            background: rgba(0, 0, 0, 0.8);
            z-index: 9998;
            justify-content: center;
            align-items: center;
            flex-direction: column;
        }

        .loader-text {
            color: var(--neon-green);
            font-size: 1.5em;
            margin-top: 20px;
            text-align: center;
        }

        .loader-spinner {
            width: 100px;
            height: 100px;
            border: 5px solid var(--neon-green);
            border-top-color: transparent;
            border-radius: 50%;
            animation: spin 1s linear infinite;
        }

        @@keyframes spin {
            100% { transform: rotate(360deg); }
        }

        .help-button {
            position: fixed;
            bottom: 20px;
            right: 20px;
            background: rgba(57, 255, 20, 0.2);
            border: 1px solid var(--neon-green);
            color: var(--neon-green);
            padding: 10px 20px;
            cursor: pointer;
            font-family: 'Courier New', monospace;
            font-size: 1.2em;
            transition: all 0.3s ease;
        }

        .help-button:hover {
            background: rgba(57, 255, 20, 0.4);
            box-shadow: 0 0 20px rgba(57, 255, 20, 0.4);
        }

        .help-modal {
            display: none;
            position: fixed;
            inset: 0;
            background: rgba(0, 0, 0, 0.9);
            z-index: 10000;
            padding: 40px;
            color: var(--neon-green);
            font-family: 'Courier New', monospace;
        }

        .help-modal.show {
            display: block;
        }

        .close-help {
            position: absolute;
            top: 20px;
            right: 20px;
            background: none;
            border: none;
            color: var(--neon-green);
            font-size: 2em;
            cursor: pointer;
        }

        @@media (max-width: 768px) {
            .container {
                padding: 10px;
            }

            .console {
                font-size: 1em;
                height: 150px;
            }

            .fallback-container {
                grid-template-columns: repeat(auto-fit, minmax(120px, 1fr));
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <h1 class="title">ROOM 9: MULTIDIMENSIONAL SCAN</h1>
        
        <div class="camera-container">
            <video id="videoElement" autoplay playsinline></video>
            <div class="overlay">
                <div class="scanner-line"></div>
            </div>
        </div>

        <div class="console" id="console"></div>

        <div class="fallback-container" id="fallbackContainer">
            <button class="color-button" data-color="red">ROJO</button>
            <button class="color-button" data-color="blue">AZUL</button>
            <button class="color-button" data-color="green">VERDE</button>
        </div>
    </div>

    <div class="portal-effect" id="portalEffect"></div>
    <div class="glitch-overlay" id="glitchOverlay"></div>
    <div class="success-message" id="successMessage">
        ¡DIMENSIÓN ESCANEADA!<br>
        Preparando portal de escape...
    </div>

    <div class="loader">
        <div class="loader-spinner"></div>
        <div class="loader-text">Morty, esto tarda más que desfragmentar mi hígado...</div>
    </div>

    <button class="help-button" onclick="toggleHelp()">AYUDA</button>

    <div class="help-modal" id="helpModal">
        <button class="close-help" onclick="toggleHelp()">×</button>
        <h2>Guía de Escaneo Multidimensional</h2>
        <p>1. Permite el acceso a la cámara cuando se te solicite.</p>
        <p>2. Muestra objetos del color que Rick te pida.</p>
        <p>3. Si no tienes cámara, usa los botones de colores.</p>
        <p>4. Completa todos los escaneos para abrir el portal.</p>
        <p>5. ¡No te rindas, Morty! La salvación está cerca.</p>
    </div>

    <script>
        // Configuración de colores personalizados para tracking.js
        tracking.ColorTracker.registerColor('rojo', function(r, g, b) {
            return r > 150 && g < 50 && b < 50;
        });

        tracking.ColorTracker.registerColor('verde', function(r, g, b) {
            return r < 50 && g > 150 && b < 50;
        });

        tracking.ColorTracker.registerColor('azul', function(r, g, b) {
            return r < 50 && g < 50 && b > 150;
        });

        // Estado del juego
        const gameState = {
            colorsToScan: ['rojo', 'verde', 'azul'],
            currentColorIndex: 0,
            scannedColors: new Set(),
            isScanning: false,
            detectionThreshold: 30, // frames consecutivos necesarios para confirmar color
            currentDetectionCount: 0,
            lastDetectedColor: null
        };

        // Elementos DOM
        const elements = {
            console: document.getElementById('console'),
            video: document.getElementById('videoElement'),
            cameraContainer: document.querySelector('.camera-container'),
            fallbackContainer: document.getElementById('fallbackContainer'),
            portal: document.getElementById('portalEffect'),
            glitch: document.getElementById('glitchOverlay'),
            success: document.getElementById('successMessage'),
            loader: document.querySelector('.loader')
        };

        // Mensajes de Rick
        const rickDialogue = {
            cameraRequest: [
                "[RICK] *burp* Morty, necesito acceso a tu cámara para escanear las anomalías dimensionales.",
                "[MORTY] P-pero Rick, ¿es seguro?",
                "[RICK] ¡Por supuesto que no es seguro! Pero es necesario. ¡Ahora dale permitir!"
            ],
            cameraError: [
                "[RICK] *burp* La cámara está más rota que mi matrimonio.",
                "[MORTY] ¿Y ahora qué hacemos, Rick?",
                "[RICK] Plan B, Morty. Siempre tengo un plan B. Usaremos estos botones interdimensionales."
            ],
            colorInstructions: {
                rojo: [
                    "[RICK] ¡Morty! Necesito algo ROJO. Como mi cara después de una noche de portal-hopping.",
                    "[RICK] Busca algo ROJO, Morty. ¡Como la sangre de tus enemigos! *burp*"
                ],
                verde: [
                    "[RICK] ¡VERDE, Morty! Como el ácido de mega árbol.",
                    "[RICK] Necesito ver algo VERDE. ¡Como mi bilis tóxica!"
                ],
                azul: [
                    "[RICK] ¡AZUL, Morty! Como el cristal de mega semilla.",
                    "[RICK] Muéstrame algo AZUL. ¡Como mis momentos de lucidez! *burp*"
                ]
            },
            success: [
                "¡Wubba Lubba Dub Dub! ¡Ese color es perfecto!",
                "¡Así se hace Morty! Tu incompetencia ocasional me sorprende.",
                "¡Bingo! El multiverso está alineándose.",
                "¡Es el tono exacto! Como la precisión de mis cálculos.",
                "¡Perfecto! Mejor que robar cristales de Mega Árboles."
            ],
            error: [
                "Morty, eres tan malo en esto como Jerry en la vida.",
                "*burp* ¿En serio? Un Meeseeks daltónico lo haría mejor.",
                "Oh genial, otro error. Típico de un Morty.",
                "¿Ese color? Mejor volvamos a la dimensión C-137.",
                "Me decepcionas más que tu padre, Morty."
            ]
        };

        // Función para mostrar mensajes en la consola
        function writeToConsole(message, delay = 30) {
            return new Promise(resolve => {
                let i = 0;
                const text = message + '\n\n';
                function type() {
                    if (i < text.length) {
                        elements.console.innerHTML += text.charAt(i);
                        elements.console.scrollTop = elements.console.scrollHeight;
                        i++;
                        setTimeout(type, delay);
                    } else {
                        resolve();
                    }
                }
                type();
            });
        }

        // Función para mostrar glitch
        function showGlitch(duration = 500) {
            elements.glitch.style.display = 'block';
            elements.glitch.style.background = `
                linear-gradient(
                    ${Math.random() * 360}deg,
                    rgba(255,0,0,0.2),
                    rgba(0,255,0,0.2),
                    rgba(0,0,255,0.2)
                )
            `;
            setTimeout(() => {
                elements.glitch.style.display = 'none';
            }, duration);
        }

        // Inicializar cámara con UI mejorada
        async function initializeCamera() {
            elements.loader.style.display = 'flex';
            
            try {
                // Mostrar diálogo de solicitud de cámara
                for (const line of rickDialogue.cameraRequest) {
                    await writeToConsole(line);
                }

                const stream = await navigator.mediaDevices.getUserMedia({
                    video: {
                        width: { ideal: 1280 },
                        height: { ideal: 720 },
                        facingMode: 'environment'
                    }
                });

                elements.video.srcObject = stream;
                elements.cameraContainer.style.display = 'block';
                elements.fallbackContainer.style.display = 'none';
                
                await new Promise((resolve) => {
                    elements.video.onloadedmetadata = () => {
                        elements.video.play();
                        resolve();
                    };
                });

                initializeColorTracking();
                
            } catch (error) {
                console.error('Error accessing camera:', error);
                for (const line of rickDialogue.cameraError) {
                    await writeToConsole(line);
                }
                elements.cameraContainer.style.display = 'none';
                elements.fallbackContainer.style.display = 'grid';
            } finally {
                elements.loader.style.display = 'none';
            }
        }

        // Mejorar el tracking de colores
        function initializeColorTracking() {
            const tracker = new tracking.ColorTracker(gameState.colorsToScan);
            
            tracker.setMinDimension(5);
            tracker.setMinGroupSize(10);

            let detectionBuffer = [];
            
            tracker.on('track', function(event) {
                if (!gameState.isScanning) return;

                const currentColor = gameState.colorsToScan[gameState.currentColorIndex];
                const detectedColors = event.data.map(rect => rect.color);

                // Usar buffer para evitar falsos positivos
                detectionBuffer.push(detectedColors.includes(currentColor));
                if (detectionBuffer.length > 10) detectionBuffer.shift();

                const consistentDetection = detectionBuffer.filter(Boolean).length >= 7;

                if (consistentDetection && !gameState.scannedColors.has(currentColor)) {
                    handleColorDetection(currentColor);
                }
            });

            tracking.track(elements.video, tracker, { camera: true });
        }

        // Mejorar la detección de colores
        async function handleColorDetection(color) {
            if (gameState.scannedColors.has(color)) return;
            
            gameState.isScanning = false;
            gameState.scannedColors.add(color);
            
            // Efectos visuales y sonoros
            showGlitch(1000);
            playSound('success');
            
            const successPhrase = rickDialogue.success[Math.floor(Math.random() * rickDialogue.success.length)];
            await writeToConsole(`[RICK] ${successPhrase}`);
            
            if (gameState.scannedColors.size === gameState.colorsToScan.length) {
                completeRoom();
            } else {
                // Preparar siguiente color
                gameState.currentColorIndex = (gameState.currentColorIndex + 1) % gameState.colorsToScan.length;
                while (gameState.scannedColors.has(gameState.colorsToScan[gameState.currentColorIndex])) {
                    gameState.currentColorIndex = (gameState.currentColorIndex + 1) % gameState.colorsToScan.length;
                }
                
                setTimeout(() => {
                    gameState.isScanning = true;
                    requestNextColor();
                }, 1500);
            }
        }

        // Mejorar el sistema de sonido
        const soundEffects = {
            portal: new Howl({ src: ['/sounds/portal.mp3'], volume: 0.5 }),
            success: new Howl({ src: ['/sounds/wubba.mp3'], volume: 0.7 }),
            error: new Howl({ src: ['/sounds/burp.mp3'], volume: 0.5 })
        };

        function playSound(soundName) {
            if (soundEffects[soundName]) {
                soundEffects[soundName].play();
            }
        }

        // Solicitar siguiente color con instrucciones más claras
        async function requestNextColor() {
            const nextColor = gameState.colorsToScan[gameState.currentColorIndex];
            const instructions = rickDialogue.colorInstructions[nextColor];
            const randomInstruction = instructions[Math.floor(Math.random() * instructions.length)];
            
            await writeToConsole(randomInstruction);
            showColorIndicator(nextColor);
        }

        // Indicador visual del color buscado
        function showColorIndicator(color) {
            const overlay = document.querySelector('.overlay');
            overlay.style.borderColor = color;
            overlay.style.boxShadow = `0 0 20px ${color}`;
        }

        // Completar la room con más efectos
        async function completeRoom() {
            elements.portal.classList.add('active');
            elements.success.classList.add('show');
            playSound('portal');
            
            showGlitch(2000);
            
            await writeToConsole("[RICK] ¡Lo hicimos, Morty! ¡El portal está estabilizado!");
            await writeToConsole("[RICK] ¡Rápido! ¡Antes de que colapse la dimensión!");
            
            // Marcar Room9 como completada
            fetch('/Home/CompleteRoom/9', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                }
            }).then(response => response.json())
              .then(data => {
                if (data.success) {
                    setTimeout(() => {
                        window.location.href = "/Home/Logros";
                    }, 5000);
                }
            });
        }

        // Mejorar el manejo de botones de fallback
        document.querySelectorAll('.color-button').forEach(button => {
            button.addEventListener('click', () => {
                const color = button.dataset.color;
                if (!gameState.isScanning || gameState.scannedColors.has(color)) return;
                
                const currentColor = gameState.colorsToScan[gameState.currentColorIndex];
                if (color === currentColor) {
                    handleColorDetection(color);
                } else {
                    showGlitch(500);
                    playSound('error');
                    const errorPhrase = rickDialogue.error[Math.floor(Math.random() * rickDialogue.error.length)];
                    writeToConsole(`[RICK] ${errorPhrase}`);
                }
            });
        });

        // Función para toggle de ayuda
        function toggleHelp() {
            const helpModal = document.getElementById('helpModal');
            helpModal.classList.toggle('show');
        }

        // Iniciar la room
        async function initRoom() {
            await writeToConsole("[SISTEMA] Iniciando escaneo multidimensional...");
            await writeToConsole("[RICK] *burp* Morty, necesitamos escanear algunos colores para calibrar el portal.");
            await writeToConsole("[RICK] Es como sintonizar la TV, pero con el multiverso.");
            
            isScanning = true;
            await requestNextColor();
            
            // Solicitar acceso a la cámara
            await initializeCamera();
        }

        // Iniciar cuando el DOM esté listo
        document.addEventListener('DOMContentLoaded', initRoom);
    </script>
</body>
</html> 