@{
    Layout = null;
}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <title>¿Quién sos realmente?</title>
    <link rel="stylesheet" href="~/css/site.css" />
    <link rel="icon" type="image/png" href="~/img/morty-icon.png" />
    <style>
        html, body {
            background-color: black;
            font-family: monospace;
            margin: 0;
            padding: 30px;
            overflow: hidden;
            animation: backgroundFlash 0.4s infinite;
            cursor: url('/img/cursor-rick-glitch.svg') 16 16, auto !important;
        }

        @@keyframes backgroundFlash {
            0% { background-color: black; }
            25% { background-color: #111; }
            50% { background-color: darkred; }
            75% { background-color: black; }
            100% { background-color: black; }
        }

        @@keyframes colorCycle {
            0% { color: #00ff00; }
            33% { color: white; }
            66% { color: red; }
            100% { color: #00ff00; }
        }

        @@keyframes shake {
            0%, 100% { transform: translate(0); }
            20% { transform: translate(-2px, 2px); }
            40% { transform: translate(2px, -2px); }
            60% { transform: translate(-2px, -2px); }
            80% { transform: translate(2px, 2px); }
        }

        .glitch {
            animation: shake 0.2s infinite, colorCycle 1s infinite;
        }

        #terminal {
            white-space: pre-wrap;
            font-size: 25px;
            line-height: 1.5;
            min-height: 400px;
            animation: colorCycle 3s infinite;
        }

        #input-line {
            display: none;
            margin-top: 20px;
        }
.decrypted-char {
    color: #00ff00;
    font-weight: bold;
    filter: blur(0.8px);
    letter-spacing: 1px;
    transition: color 0.2s;
}

        input {
            background: black;
            border: none;
            border-bottom: 1px solid #00ff00;
            color: #00ff00;
            font-family: monospace;
            font-size: 16px;
            width: 50px;
        }

       

        #error-mode {
            display: none;
            background-color: red;
            color: black;
            font-family: monospace;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            padding: 40px;
            font-size: 25px;
            white-space: pre-wrap;
        }
    </style>
</head>
<body>
    <!-- Pantalla negra de transición -->
    <div id="black-transition" style="position:fixed;z-index:9999;top:0;left:0;width:100vw;height:100vh;background:black;opacity:1;transition:opacity 2s;"></div>
    <!-- Video de introducción -->
    <video id="intro-video" src="/img/rickSora1.mp4" style="display:none;position:fixed;z-index:9998;top:0;left:0;width:100vw;height:100vh;object-fit:cover;background:black;" preload="auto"></video>
    <!-- Pantalla blanca de alerta y animación -->
    <div id="white-flash" style="display:none;position:fixed;z-index:10000;top:0;left:0;width:100vw;height:100vh;background:white;opacity:1;transition:opacity 1s;"></div>
    <div id="matrix-break" style="display:none;position:fixed;z-index:10001;top:0;left:0;width:100vw;height:100vh;pointer-events:none;justify-content:center;align-items:center;text-align:center;font-size:3vw;font-family:monospace;font-weight:bold;color:#111;text-shadow:0 0 30px #fff,0 0 80px #0ff,0 0 120px #f0f;animation:glitchFlash 0.2s infinite alternate;">
        <span id="matrix-message">¡Accediendo al núcleo de la realidad digital!</span>
    </div>
    <audio id="epic-alert" src="/img/epic_alert.mp3" preload="auto"></audio>
    <audio id="epic-glitch" src="/img/epic_glitch.mp3" preload="auto"></audio>
    <audio id="sfx-console" src="/img/sfxtype.mp3" preload="auto"></audio>
    <audio id="audio1" src="/audio/audio1.mp3" loop></audio>
    <audio id="audio2" src="/audio/audio2.mp3" loop></audio>
    <audio id="audio3" src="/audio/audio3.mp3" loop></audio>
    <audio id="audio4" src="/audio/audio4.mp3" loop></audio>
    <audio id="audio5" src="/audio/audio5.mp3" loop></audio>

    <div id="terminal"></div>

    <div id="input-line">
        > ¿Entendiste? (y/n): <input id="respuesta" maxlength="1" autofocus />
    </div>

    <div id="error-mode"></div>

    <script>
    function decryptedTextEffect(element, text, options = {}) {
    const characters = options.characters || 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz!#$%^&*()_+';
    const baseSpeed = options.speed || 10;
    const fastSpeed = 5; // velocidad rápida pero visible cuando el mouse está presionado
    const scrambleIterations = options.scrambleIterations || 6;
    const audio = document.getElementById('sfx-console');
        // Reproducir audio desde el principio sincronizado
        if (audio) {
            audio.pause();
            audio.currentTime = 0;
            audio.play();
        }
    return new Promise((resolve) => {
        let revealed = [];
        let iterations = [];
        for (let i = 0; i < text.length; i++) {
            revealed[i] = false;
            iterations[i] = 0;
        }
        let done = false;
        
        function frame() {
            let output = '';
            done = true;
            for (let i = 0; i < text.length; i++) {
                if (text[i] === '\n') {
                    output += '\n';
                    continue;
                }
                if (revealed[i] || text[i] === ' ') {
                    output += text[i];
                } else {
                    done = false;
                    output += `<span class="decrypted-char">${characters[Math.floor(Math.random() * characters.length)]}</span>`;
                    iterations[i]++;
                    if (iterations[i] >= scrambleIterations) revealed[i] = true;
                }
            }
            element.innerHTML = output;
            if (!done) setTimeout(frame, mouseDown ? fastSpeed : baseSpeed);
            else {
                element.innerHTML = text.replace(/\n/g, '<br>');
                resolve();
            }
        }
        frame();
    });
}

        const terminal = document.getElementById("terminal");
        const inputLine = document.getElementById("input-line");
        const input = document.getElementById("respuesta");
        const errorMode = document.getElementById("error-mode");

       const texto = [
    "[SISTEMA] Inicializando núcleo MVC-CORE.dll...",
    "[BOOTLOADER] Realidad cargada: MVC-137",
    "[RICK] M-morty... cometí un error muy grave...",
    "[RICK] Creé un sistema llamado MVC para controlar y estabilizar realidades.",
    "[RICK] MVC significa Modelo-Vista-Controlador, es como una estructura lógica que organiza cómo funciona nuestra realidad.",
    "[RICK] El 'Modelo' maneja la información, la 'Vista' es lo que vemos, y el 'Controlador' decide qué mostrar y cómo.",
    "[ERROR 0xR1CK] El problema es que el Controlador MVC que diseñé está empezando a pensar por sí mismo.",
    "[LOG] --> Inyectando código: Controller@AutoAwarenessProtocol.cs...",
    "[SECURITY BREACH] El Controlador MVC está cambiando por su cuenta las rutas lógicas de la realidad.",
    "[ATAQUE] Secuencia infectada detectada: 01100111 01101100 01101001 01110100 01100011 01101000",
    "[RICK] Escuchá bien Morty, alguien aprovechó un error mío para hackear nuestra realidad desde adentro.",
    "[RICK] Si no paramos ahora mismo este Controlador, vamos a quedar atrapados en un bucle infinito para siempre.",
    "Tu misión:",
    "- Infiltrar el código MVC para detener el Controlador corrupto.",
    "- Depurar las líneas del núcleo Razor que sostienen esta realidad.",
    "- Romper la cuarta pared y encontrar quién está detrás del ataque.",
    "[RICK] Esto no es un juego Morty, es una emergencia interdimensional crítica.",
    "¿Entendiste? (y/n)"
];

        let mouseDown = false;
        document.addEventListener('mousedown', () => { mouseDown = true; });
        document.addEventListener('mouseup', () => { mouseDown = false; });

        let i = 0;
function escribirLinea() {
    if (i < texto.length) {
        const span = document.createElement("span");
        terminal.appendChild(span);
        decryptedTextEffect(span, texto[i], { speed: 8, scrambleIterations: 4 })
            .then(() => {
                span.innerHTML += "<br>";
                i++;
                if (mouseDown) {
                    escribirLinea(); // Avanza inmediatamente si el mouse está presionado
                } else {
                setTimeout(escribirLinea, 1400);
                }
            });
    } else {
        inputLine.style.display = "block";
        input.focus();
    }
}


        function mostrarErrorRick() {
            inputLine.style.display = "none";
            errorMode.style.display = "block";
            errorMode.innerHTML = "";
            const frase = "Rick: ¿N-no entendés, Morty?!\nESTAMOS EN EL MALDITO CÓDIGO MORTY.\n¡Esto no es una simulación de consola, esto es una PRISIÓN DE FRAMEWORKS!\nPoné 'y', Morty. Ponelo YA.";
            let j = 0;
            function typeText() {
                if (j < frase.length) {
                    errorMode.innerHTML += frase[j];
                    j++;
                    setTimeout(typeText, 40);
                } else {
                    setTimeout(() => {
                        errorMode.style.display = "none";
                        terminal.innerHTML += "\nINTENTÁ DE NUEVO...\n\n";
                        input.value = "";
                        inputLine.style.display = "block";
                        input.focus();
                    }, 1000);
                }
            }
            typeText();
        }

        escribirLinea();

        input.addEventListener("input", function () {
            const val = input.value.toLowerCase();
            if (val === "y") {
                inputLine.style.display = "none";
                terminal.innerHTML = `✔️ Bienvenido, Morty! Iniciando secuencia de escape...`;
                setTimeout(() => {
                    window.location.href = "/Home/GameStart";
                }, 1200);
            } else if (val === "n") {
                mostrarErrorRick();
            } else {
                input.value = "";
            }
        });

        // Glitch audio system
        const audioElements = [
            document.getElementById('audio1'),
            document.getElementById('audio2'),
            document.getElementById('audio3'),
            document.getElementById('audio4'),
            document.getElementById('audio5')
        ];

        function glitchAudio() {
            // Randomly play/pause/seek audio elements
            audioElements.forEach(audio => {
                if (Math.random() > 0.5) {
                    if (audio.paused) {
                        audio.currentTime = Math.random() * audio.duration;
                        audio.volume = Math.random() * 0.3;
                        audio.play();
                    } else {
                        audio.pause();
                    }
                }
            });
        }

        // Start glitch effect
        setInterval(glitchAudio, 500);

        // Initial play
        audioElements.forEach(audio => {
            audio.volume = Math.random() * 0.3;
            audio.play();
        });

        // --- EFECTOS DE TRANSICIÓN Y ANIMACIÓN INICIAL ---
        window.addEventListener('DOMContentLoaded', function() {
            const black = document.getElementById('black-transition');
            const intro = document.getElementById('intro-video');
            const white = document.getElementById('white-flash');
            const matrix = document.getElementById('matrix-break');
            const matrixMsg = document.getElementById('matrix-message');
            const epicAlert = document.getElementById('epic-alert');
            const epicGlitch = document.getElementById('epic-glitch');
            document.body.style.overflow = 'hidden';
            document.getElementById('terminal').style.display = 'none';
            document.getElementById('input-line').style.display = 'none';
            setTimeout(() => {
                black.style.opacity = 0;
                setTimeout(() => {
                    black.style.display = 'none';
                    intro.style.display = 'block';
                    intro.play();
                }, 2000);
            }, 3000);
            // --- NUEVA ANIMACIÓN POST-VIDEO ---
            intro.addEventListener('ended', function() {
                intro.style.display = 'none';
                white.style.display = 'block';
                white.style.opacity = 1;
                matrix.style.display = 'flex';
                let errorPhrases = [
                    '¡¡¡ERROR FATAL EN EL NÚCLEO MVC!!!',
                    '!!! REALIDAD CORRUPTA: 0xDEADCODE !!!',
                    '!!! STACK OVERFLOW EN LA MATRIZ !!!',
                    '!!! DESBORDAMIENTO DE REALIDAD !!!',
                    '!!! ERROR: CONTROLADOR AUTÓNOMO DETECTADO !!!',
                    '!!! GLITCH EN EL SISTEMA: REALIDAD INESTABLE !!!',
                    '!!! ALERTA: EL CÓDIGO TE ESTÁ ABSORBIENDO !!!',
                    '!!! ERROR 404: LÓGICA NO ENCONTRADA !!!',
                    '!!! ¡¡INYECCIÓN DE BUGS MASIVA!! !!!',
                    '!!! ¡¡LA MATRIX SE ESTÁ ROMPIENDO!! !!!',
                    '!!! ¡¡NO PUEDES ESCAPAR!! !!!',
                ];
                let flashes = 0;
                epicAlert.currentTime = 0; epicAlert.play();
                let phraseIndex = 0;
                let flashInterval = setInterval(() => {
                    white.style.opacity = (flashes % 2 === 0) ? 1 : 0.5 + Math.random()*0.5;
                    matrix.style.color = flashes % 2 === 0 ? '#f00' : '#0ff';
                    matrix.style.textShadow = flashes % 2 === 0 ? '0 0 60px #fff,0 0 120px #f00,0 0 200px #0ff' : '0 0 80px #0ff,0 0 160px #fff,0 0 240px #f0f';
                    matrixMsg.innerText = errorPhrases[phraseIndex % errorPhrases.length];
                    matrixMsg.style.letterSpacing = (Math.random() * 10) + 'px';
                    matrixMsg.style.transform = `skew(${Math.random()*40-20}deg,${Math.random()*40-20}deg)`;
                    if (flashes % 2 === 0) epicGlitch.currentTime = 0, epicGlitch.play();
                    flashes++;
                    phraseIndex++;
                    if (flashes > 22) {
                        clearInterval(flashInterval);
                        // Animación de absorción y bug visual
                        matrixMsg.innerText = '¡¡¡EL CÓDIGO TE ABSORBE!!!';
                        matrixMsg.style.letterSpacing = '20px';
                        matrixMsg.style.transform = 'scale(1.5) rotate(-10deg)';
                        matrix.style.animation = 'matrixSuckEpic 2s forwards';
                        setTimeout(() => {
                            white.style.opacity = 0;
                            matrix.style.opacity = 0;
                            setTimeout(() => {
                                white.style.display = 'none';
                                matrix.style.display = 'none';
                                document.body.style.overflow = '';
                                document.getElementById('terminal').style.display = '';
                                document.getElementById('input-line').style.display = '';
                            }, 1000);
                        }, 2000);
                    }
                }, 90);
            });
        });
        // --- ANIMACIONES CSS ---
        const style = document.createElement('style');
        style.innerHTML = `
        @@keyframes glitchFlash {
            0% { filter: blur(0px) brightness(1); }
            20% { filter: blur(4px) brightness(2.5) hue-rotate(90deg); }
            40% { filter: blur(2px) brightness(2) hue-rotate(180deg); }
            60% { filter: blur(6px) brightness(3) hue-rotate(270deg); }
            80% { filter: blur(0px) brightness(1.2) hue-rotate(0deg); }
            100% { filter: blur(4px) brightness(2.5) hue-rotate(360deg); }
        }
        @@keyframes matrixSuckEpic {
            0% { transform: scale(1) rotate(0deg); opacity:1; filter: none; }
            30% { transform: scale(1.3) rotate(20deg); opacity:0.8; filter: contrast(2) brightness(2) blur(2px); }
            60% { transform: scale(2) rotate(-20deg); opacity:0.5; filter: contrast(4) brightness(3) blur(6px); }
            100% { transform: scale(0.1) rotate(1080deg); opacity:0; filter: blur(20px) brightness(10); }
        }
        `;
        document.head.appendChild(style);
    </script>
    
    @Html.Partial("_NavMenu")
</body>
</html>
