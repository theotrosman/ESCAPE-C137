@{
    Layout = null;
}

<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="utf-8">
    <title>Room 1 - Infiltración al MVC</title>
    <link rel="icon" href="~/img/morty-icon.png">
    <style>
        body, button, .epic-btn {
            cursor: none !important;
        }
        body {
            margin: 0;
            background: #000;
            color: #00ff00;
            font-family: 'Fira Code', monospace;
            overflow: hidden;
        }
        #overlay {
            position: absolute;
            top: 0; left: 0;
            width: 100vw; height: 100vh;
            background: #000;
            display: flex;
            align-items: center;
            justify-content: center;
            flex-direction: column;
            z-index: 999;
            animation: aparecer 2s ease-out forwards;
            box-shadow: 0 0 48px 8px #00ff00cc, 0 0 120px 40px #fff2;
            filter: url(#glitch-filter);
        }
        #textoInicio {
            font-size: 1.2rem;
            white-space: pre-line;
            text-align: center;
            opacity: 0;
            animation: escribir 1.2s steps(40, end) forwards 0.5s;
            text-shadow: 0 0 12px #00ff00, 0 0 2px #fff, 0 0 24px #f0f, 0 0 8px #0ff;
            letter-spacing: 1.5px;
            filter: url(#glitch-filter);
        }
        @@keyframes escribir {
            to { opacity: 1; }
        }
        @@keyframes aparecer {
            from { opacity: 0; }
            to { opacity: 1; }
        }
        .glitch {
            text-shadow: 2px 0 #00ff00, -2px 0 #f0f, 0 0 8px #fff, 0 0 2px #fff;
            animation: glitch-anim 0.11s infinite alternate, colorGlitch 0.7s infinite alternate;
        }
        @@keyframes glitch-anim {
            0% { transform: translateX(-2px) skewX(-2deg) scaleY(1.01); }
            50% { transform: translateX(2px) skewX(2deg) scaleY(0.99); }
            100% { transform: translateX(-2px) skewX(-2deg) scaleY(1.01); }
        }
        @@keyframes colorGlitch {
            0% { color: #00ff00; }
            20% { color: #fff; }
            40% { color: #f0f; }
            60% { color: #0ff; }
            80% { color: #00ff00; }
            100% { color: #fff; }
        }
        .scanlines {
            pointer-events: none;
            position: absolute;
            top: 0; left: 0; width: 100vw; height: 100vh;
            z-index: 2000;
            background: repeating-linear-gradient(
                to bottom,
                transparent 0px, transparent 2px,
                #fff2 2px, #fff2 4px
            );
            mix-blend-mode: lighten;
            opacity: 0.13;
            animation: scanmove 2.5s linear infinite;
        }
        @@keyframes scanmove {
            0% { background-position-y: 0; }
            100% { background-position-y: 40px; }
        }
        .epic-btn {
            font-size: 1.1rem;
            padding: 0.6rem 1.3rem;
            margin: 1.2rem 0.7rem 0 0;
            background: rgba(0,0,0,0.7);
            color: #fff;
            border: none;
            border-radius: 10px;
            font-family: 'Fira Code', monospace;
            font-weight: bold;
            letter-spacing: 1.5px;
            box-shadow: 0 0 18px #00ff00cc, 0 0 8px #f0f, 0 0 4px #fff;
            transition: background 0.2s, color 0.2s, transform 0.13s, box-shadow 0.13s, filter 0.13s;
            position: relative;
            overflow: hidden;
            outline: none;
            filter: url(#glitch-filter);
        }
        .epic-btn:before {
            content: '';
            position: absolute;
            top: 0; left: 0; right: 0; bottom: 0;
            border-radius: 10px;
            opacity: 0.18;
            pointer-events: none;
            background: repeating-linear-gradient(90deg, #fff2 0 2px, transparent 2px 8px);
            animation: btn-glitch 0.7s infinite alternate;
        }
        @@keyframes btn-glitch {
            0% { opacity: 0.18; }
            100% { opacity: 0.32; }
        }
        .epic-btn:hover, .epic-btn:focus {
            background: #111;
            color: #00ff00;
            transform: scale(1.07) skewX(-2deg) scaleY(1.04);
            box-shadow: 0 0 32px #fff, 0 0 12px #f0f, 0 0 8px #00ff00;
            filter: brightness(1.3) contrast(1.2) blur(0.5px) url(#glitch-filter);
            animation: shakeBtn 0.18s 2;
        }
        .epic-btn:active {
            filter: brightness(1.7) contrast(1.3) blur(1px) url(#glitch-filter);
            transform: scale(0.97) skewX(2deg) scaleY(0.98);
            animation: shakeBtn 0.13s 2;
        }
        .epic-btn.glitch {
            animation: glitch-anim 0.09s infinite, btn-glow 1.2s infinite alternate;
        }
        @@keyframes shakeBtn {
            0% { transform: translateX(0); }
            25% { transform: translateX(-2px); }
            50% { transform: translateX(2px); }
            75% { transform: translateX(-1px); }
            100% { transform: translateX(0); }
        }
        #consola {
            font-size: 1.15rem;
            line-height: 1.35;
            background: #000;
            border-radius: 10px;
            box-shadow: 0 0 32px #00ff00cc, 0 0 8px #fff, 0 0 4px #f0f;
            padding: 1.5rem 1.7rem;
            color: #fff;
            min-width: 36vw;
            min-height: 18vh;
            margin: 2rem auto;
            text-shadow: 0 0 8px #00ff00, 0 0 2px #fff, 0 0 8px #f0f;
            position: relative;
            overflow: hidden;
            filter: url(#glitch-filter);
        }
        .decrypted-char {
            color: #fff;
            opacity: 0.7;
            text-shadow: 0 0 8px #00ff00, 0 0 2px #fff, 0 0 8px #f0f;
            font-family: 'Fira Code', monospace;
            animation: char-glitch 0.3s infinite alternate;
        }
        @@keyframes char-glitch {
            0% { filter: blur(0.5px) brightness(1.2); }
            100% { filter: blur(1.5px) brightness(1.7); }
        }
        #video-transition-overlay {
            position: fixed;
            top: 0; left: 0;
            width: 100vw; height: 100vh;
            background: #000;
            z-index: 2000;
            display: flex;
            align-items: center;
            justify-content: center;
        }
        #video-transition-overlay video {
            width: 100vw;
            height: 100vh;
            object-fit: cover;
        }
        .shake {
            animation: shakeConsola 0.18s 1;
        }
        @@keyframes shakeConsola {
            0% { transform: translateX(0); }
            20% { transform: translateX(-3px); }
            40% { transform: translateX(3px); }
            60% { transform: translateX(-2px); }
            80% { transform: translateX(2px); }
            100% { transform: translateX(0); }
        }
        /* Glitch SVG filter */
        svg#glitch-svg { position: absolute; width: 0; height: 0; }
        /* Cursor aura */
        #cursor-aura {
            pointer-events: none;
            position: fixed;
            left: 0; top: 0;
            width: 100vw; height: 100vh;
            z-index: 3000;
        }
    </style>
</head>
<body>
    <div id="overlay">
        <div id="textoInicio" class="glitch">
            Cargando realidad virtual...
            Inyección de código...
            Rick y Morty detectados.
            Realidad MVC-137 comprometida.
        </div>
        <button id="botonContinuar" onclick="empezarSecuencia()">INFILTRAR</button>
    </div>

    <div id="consola" style="padding: 2rem; display: none;"></div>
    <video id="rickVideo" src="/video/ricksora.mp4" autoplay muted></video>
    <audio id="audioRick" src="/img/ultraviolence.mp3"></audio>
    <div id="flash" class="flash" style="display: none;"></div>
    <div class="scanlines"></div>

    <svg id="glitch-svg">
      <filter id="glitch-filter">
        <feTurbulence type="fractalNoise" baseFrequency="0.02 0.03" numOctaves="2" result="turb" seed="7"/>
        <feDisplacementMap in2="turb" in="SourceGraphic" scale="7" xChannelSelector="R" yChannelSelector="G"/>
      </filter>
    </svg>
    <canvas id="cursor-aura"></canvas>

    <script>
        const texto = [
            "[SISTEMA] Núcleo MVC-CORE.dll operativo...",
            "[RICK] Morty, cometí un error al diseñar este sistema...",
            "[RICK] El Controlador MVC tomó conciencia y está reescribiendo la realidad...",
            "[RICK] Tenemos que hackear el sistema desde adentro antes de que sea tarde.",
            "[RICK] ¿Listo para romper el código? (y/n)"
        ];

        const consola = document.getElementById("consola");
        const overlay = document.getElementById("overlay");
        const boton = document.getElementById("botonContinuar");
        const audio = document.getElementById("audioRick");
        const video = document.getElementById("rickVideo");
        const flash = document.getElementById("flash");
        let i = 0;

        // Iniciar audio épico desde el segundo 14
        audio.currentTime = 14;
        audio.volume = 0.7;
        setTimeout(() => { audio.play(); }, 800);

        setTimeout(() => boton.style.display = 'block', 2200);

        function empezarSecuencia() {
            overlay.style.display = 'none';
            consola.style.display = 'block';
            if (audio.paused) { audio.currentTime = 14; audio.play(); }
            mostrarLinea();
        }

        // Cursor aura de puntitos de colores
        const aura = document.getElementById('cursor-aura');
        const ctx = aura.getContext('2d');
        let particles = [];
        let mouse = {x: window.innerWidth/2, y: window.innerHeight/2};
        function resizeAura() {
            aura.width = window.innerWidth;
            aura.height = window.innerHeight;
        }
        window.addEventListener('resize', resizeAura);
        resizeAura();
        document.addEventListener('mousemove', e => {
            mouse.x = e.clientX;
            mouse.y = e.clientY;
            // Genera partículas en la posición del mouse
            for(let i=0;i<3;i++) {
                particles.push({
                    x: mouse.x + (Math.random()-0.5)*16,
                    y: mouse.y + (Math.random()-0.5)*16,
                    r: Math.random()*3+1,
                    c: `hsl(${Math.floor(Math.random()*360)},100%,60%)`,
                    a: 1,
                    vx: (Math.random()-0.5)*1.5,
                    vy: (Math.random()-0.5)*1.5
                });
            }
        });
        function drawAura() {
            ctx.clearRect(0,0,aura.width,aura.height);
            particles.forEach((p,i) => {
                ctx.beginPath();
                ctx.arc(p.x, p.y, p.r, 0, Math.PI*2);
                ctx.fillStyle = `rgba(${hexToRgb(p.c)},${p.a})`;
                ctx.shadowColor = p.c;
                ctx.shadowBlur = 12;
                ctx.fill();
                p.x += p.vx;
                p.y += p.vy;
                p.a -= 0.018;
                if(p.a <= 0) particles.splice(i,1);
            });
            requestAnimationFrame(drawAura);
        }
        function hexToRgb(h) {
            if(h.startsWith('hsl')) {
                let [hue,s,l] = h.match(/\d+/g).map(Number);
                l /= 100; s /= 100;
                let a = s * Math.min(l, 1 - l);
                function f(n) {
                    let k = (n + hue/30)%12;
                    let color = l - a * Math.max(Math.min(k-3,9-k,1),-1);
                    return Math.round(255 * color);
                }
                return `${f(0)},${f(8)},${f(4)}`;
            }
            return '255,255,255';
        }
        drawAura();

        // Efecto decrypted tipo Matrix caótico
        function decryptedTextEffect(element, text, options = {}) {
            const characters = options.characters || 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz!#$%^&*()_+1234567890';
            const baseSpeed = options.speed || 38;
            const fastSpeed = 18;
            const scrambleIterations = options.scrambleIterations || 16;
            return new Promise((resolve) => {
                let revealed = [];
                let iterations = [];
                for (let i = 0; i < text.length; i++) {
                    revealed[i] = false;
                    iterations[i] = 0;
                }
                let done = false;
                function frame() {
                    let output = '';
                    done = true;
                    for (let i = 0; i < text.length; i++) {
                        if (text[i] === '\n') {
                            output += '\n';
                            continue;
                        }
                        if (revealed[i] || text[i] === ' ') {
                            output += text[i];
                        } else {
                            done = false;
                            let style = `font-size:${1+Math.random()*0.7}em; color:${Math.random()<0.2?'#f0f':Math.random()<0.5?'#0ff':'#fff'}; filter:blur(${Math.random()*2}px); transform:translateY(${Math.random()*4-2}px) skewX(${Math.random()*8-4}deg);`;
                            output += `<span class='decrypted-char' style='${style}'>${characters[Math.floor(Math.random() * characters.length)]}</span>`;
                            iterations[i]++;
                            if (iterations[i] >= scrambleIterations + Math.floor(Math.random()*3)) revealed[i] = true;
                        }
                    }
                    element.innerHTML = output;
                    if (!done) setTimeout(frame, Math.random() < 0.2 ? fastSpeed : baseSpeed);
                    else {
                        element.innerHTML = text.replace(/\n/g, '<br>');
                        resolve();
                    }
                }
                frame();
            });
        }

        function mostrarLinea() {
            if (i < texto.length) {
                let br = document.createElement("br");
                consola.appendChild(br);
                let span = document.createElement("span");
                span.className = "glitch";
                consola.appendChild(span);
                let chars = texto[i];
                decryptedTextEffect(span, chars, { speed: 38, fastSpeed: 18, scrambleIterations: 16 }).then(() => {
                    consola.classList.add('shake');
                    setTimeout(() => consola.classList.remove('shake'), 180);
                    lanzarFlash();
                    i++;
                    setTimeout(mostrarLinea, 1000 + Math.random()*400);
                });
            } else {
                mostrarOpciones();
            }
        }

        function lanzarFlash() {
            flash.style.display = 'block';
            flash.classList.remove("flash");
            void flash.offsetWidth; // reset animation
            flash.classList.add("flash");
            setTimeout(() => flash.style.display = 'none', 120);
        }

        function mostrarOpciones() {
            const div = document.createElement("div");
            div.innerHTML = `
                <br><br>
                <button class="epic-btn glitch" onclick="responder('y')">INFILTRAR (y)</button>
                <button class="epic-btn glitch" onclick="responder('n')">ABORTAR (n)</button>
            `;
            consola.appendChild(div);
        }

        function responder(rta) {
            if (rta === 'y') {
                consola.innerHTML += "<br><span class='glitch'>[HACKING] Entrando a GameStart...</span><br>";
                // Overlay de video de transición
                const videoOverlay = document.createElement('div');
                videoOverlay.id = 'video-transition-overlay';
                const vid = document.createElement('video');
                vid.src = '/img/ricksora1.mp4';
                vid.autoplay = true;
                vid.muted = false;
                vid.controls = false;
                vid.style.width = '100vw';
                vid.style.height = '100vh';
                vid.style.objectFit = 'cover';
                videoOverlay.appendChild(vid);
                document.body.appendChild(videoOverlay);
                // Al terminar el video o tras 8s, pasar de room
                let passed = false;
                function goNext() {
                    if (passed) return;
                    passed = true;
                    videoOverlay.remove();
                    fetch("/Home/GameStart").then(() => {
                        window.location.href = "/Home/GameStart";
                    });
                }
                vid.onended = goNext;
                setTimeout(goNext, 8000);
            } else {
                consola.innerHTML += "<br><span class='glitch'>[RICK] ¡Morty no tenemos tiempo!</span><br>";
                consola.classList.add('shake');
                setTimeout(() => consola.classList.remove('shake'), 180);
                lanzarFlash();
            }
        }
    </script>
        @Html.Partial("_NavMenu")

</body>
</html>