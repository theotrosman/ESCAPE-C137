@{
    Layout = null;
}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <title>:3</title>
    <link rel="stylesheet" href="~/css/site.css" />
    <style>
        html, body {
            background-color: black;
            font-family: monospace;
            margin: 0;
            padding: 30px;
            overflow: hidden;
            animation: backgroundFlash 0.4s infinite;
        }

        @@keyframes backgroundFlash {
            0% { background-color: black; }
            25% { background-color: #111; }
            50% { background-color: darkred; }
            75% { background-color: black; }
            100% { background-color: black; }
        }

        @@keyframes colorCycle {
            0% { color: #00ff00; }
            33% { color: white; }
            66% { color: red; }
            100% { color: #00ff00; }
        }

        @@keyframes shake {
            0%, 100% { transform: translate(0); }
            20% { transform: translate(-2px, 2px); }
            40% { transform: translate(2px, -2px); }
            60% { transform: translate(-2px, -2px); }
            80% { transform: translate(2px, 2px); }
        }

        .glitch {
            animation: shake 0.2s infinite, colorCycle 1s infinite;
        }

        #terminal {
            white-space: pre-wrap;
            font-size: 25px;
            line-height: 1.5;
            min-height: 400px;
            animation: colorCycle 3s infinite;
        }

        #input-line {
            display: none;
            margin-top: 20px;
        }
.decrypted-char {
    color: #00ff00;
    font-weight: bold;
    filter: blur(0.8px);
    letter-spacing: 1px;
    transition: color 0.2s;
}

        input {
            background: black;
            border: none;
            border-bottom: 1px solid #00ff00;
            color: #00ff00;
            font-family: monospace;
            font-size: 16px;
            width: 50px;
        }

       

        #error-mode {
            display: none;
            background-color: red;
            color: black;
            font-family: monospace;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            padding: 40px;
            font-size: 25px;
            white-space: pre-wrap;
        }
    </style>
</head>
<body>
    <audio id="sfx-console" src="/img/sfxtype.mp3" preload="auto"></audio>
    <audio id="audio1" src="/audio/audio1.mp3" loop></audio>
    <audio id="audio2" src="/audio/audio2.mp3" loop></audio>
    <audio id="audio3" src="/audio/audio3.mp3" loop></audio>
    <audio id="audio4" src="/audio/audio4.mp3" loop></audio>
    <audio id="audio5" src="/audio/audio5.mp3" loop></audio>

    <div id="terminal"></div>

    <div id="input-line">
        > ¿Entendiste? (y/n): <input id="respuesta" maxlength="1" autofocus />
    </div>

    <div id="error-mode"></div>

    <script>
    function decryptedTextEffect(element, text, options = {}) {
    const characters = options.characters || 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz!#$%^&*()_+';
    const speed = options.speed || 10;
    const scrambleIterations = options.scrambleIterations || 6;
    const audio = document.getElementById('sfx-console');
        // Reproducir audio desde el principio sincronizado
        if (audio) {
            audio.pause();
            audio.currentTime = 0;
            audio.play();
        }
    return new Promise((resolve) => {
        let revealed = [];
        let iterations = [];
        for (let i = 0; i < text.length; i++) {
            revealed[i] = false;
            iterations[i] = 0;
        }
        let done = false;
        
        function frame() {
            let output = '';
            done = true;
            for (let i = 0; i < text.length; i++) {
                if (text[i] === '\n') {
                    output += '\n';
                    continue;
                }
                if (revealed[i] || text[i] === ' ') {
                    output += text[i];
                } else {
                    done = false;
                    output += `<span class="decrypted-char">${characters[Math.floor(Math.random() * characters.length)]}</span>`;
                    iterations[i]++;
                    if (iterations[i] >= scrambleIterations) revealed[i] = true;
                }
            }
            element.innerHTML = output;
            if (!done) setTimeout(frame, speed);
            else {
                element.innerHTML = text.replace(/\n/g, '<br>');
                resolve();
            }
        }
        frame();
    });
}

        const terminal = document.getElementById("terminal");
        const inputLine = document.getElementById("input-line");
        const input = document.getElementById("respuesta");
        const errorMode = document.getElementById("error-mode");

        const texto = [
            "[SISTEMA] Inicializando núcleo de conciencia...",
            "[BOOTLOADER] Realidad: MVC-137",
            "[RICK] M-morty... we're in the code...",
            "[ALERTA] Protocolo de autoconciencia activado.",
            "[ERROR 0xD3AD] El controlador empezó a escribir su propio código.",
            "[LOG] --> injecting controller@SelfAwareMode.cs...",
            "[SECURITY BREACH] Controlador intentando reescribir rutas.",
            "[ATAQUE] Bit sequence infiltrated: 01100111 01101100 01101001 01110100 01100011 01101000",
            "[RICK] Escucha bien, Morty. Alguien está intentando hackear la realidad.",
            "[RICK] Han encontrado una vulnerabilidad en el framework de la existencia.",
            "[RICK] Si no detenemos esto, toda la realidad podría colapsar en un bucle infinito.",
            "Tu misión:",
            "- Infiltrar la pipeline de la realidad.",
            "- Depurar el núcleo Razor que mantiene todo unido.",
            "- Romper la cuarta pared y encontrar al hacker.",
            "[RICK] Esto no es un juego Morty, es una fucking intervención cósmica.",
            "¿Entendiste? (y/n)"
        ];

        let i = 0;
function escribirLinea() {
    if (i < texto.length) {
        const span = document.createElement("span");
        terminal.appendChild(span);
        decryptedTextEffect(span, texto[i], { speed: 8, scrambleIterations: 4 })
            .then(() => {
                span.innerHTML += "<br>";
                i++;
                setTimeout(escribirLinea, 1400);
            });
    } else {
        inputLine.style.display = "block";
        input.focus();
    }
}


        function mostrarErrorRick() {
            inputLine.style.display = "none";
            errorMode.style.display = "block";
            errorMode.innerHTML = "";
            const frase = "Rick: ¿N-no entendés, Morty?!\nESTAMOS EN EL MALDITO CÓDIGO MORTY.\n¡Esto no es una simulación de consola, esto es una PRISIÓN DE FRAMEWORKS!\nPoné 'y', Morty. Ponelo YA.";
            let j = 0;
            function typeText() {
                if (j < frase.length) {
                    errorMode.innerHTML += frase[j];
                    j++;
                    setTimeout(typeText, 40);
                } else {
                    setTimeout(() => {
                        errorMode.style.display = "none";
                        terminal.innerHTML += "\nINTENTÁ DE NUEVO...\n\n";
                        input.value = "";
                        inputLine.style.display = "block";
                        input.focus();
                    }, 1000);
                }
            }
            typeText();
        }

        escribirLinea();

        input.addEventListener("input", function () {
            const val = input.value.toLowerCase();
            if (val === "y") {
                terminal.innerHTML = "✔️ Iniciando secuencia de escape...";
                inputLine.style.display = "none";
                
                // Marcar Room1 como completada
                fetch('/Home/CompleteRoom/1', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                })
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Network response was not ok');
                    }
                    return response.json();
                })
                .then(data => {
                    if (data.success) {
                        terminal.innerHTML += "\n🌀 Portal estable detectado...";
                        setTimeout(() => {
                            window.location.href = "/Home/GameStart";
                        }, 1000);
                    } else {
                        throw new Error('Room completion failed');
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    terminal.innerHTML = "❌ ERROR: Fallo en la secuencia de escape. Reintentando...";
                    setTimeout(() => {
                            window.location.href = "/Home/GameStart";
                    }, 2000);
                });
            } else if (val === "n") {
                mostrarErrorRick();
            } else {
                input.value = "";
            }
        });

        // Glitch audio system
        const audioElements = [
            document.getElementById('audio1'),
            document.getElementById('audio2'),
            document.getElementById('audio3'),
            document.getElementById('audio4'),
            document.getElementById('audio5')
        ];

        function glitchAudio() {
            // Randomly play/pause/seek audio elements
            audioElements.forEach(audio => {
                if (Math.random() > 0.5) {
                    if (audio.paused) {
                        audio.currentTime = Math.random() * audio.duration;
                        audio.volume = Math.random() * 0.3;
                        audio.play();
                    } else {
                        audio.pause();
                    }
                }
            });
        }

        // Start glitch effect
        setInterval(glitchAudio, 500);

        // Initial play
        audioElements.forEach(audio => {
            audio.volume = Math.random() * 0.3;
            audio.play();
        });
    </script>
</body>
</html>
