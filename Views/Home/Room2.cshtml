@{
    ViewData["Title"] = "Room 2 - Código Cinefílico";
}

<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@ViewData["Title"]</title>
        <link rel="icon" type="image/png" href="~/img/morty-icon.png" />

    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            background-color: #0a0a0a;
            font-family: 'Courier New', monospace;
            color: #00ffcc;
            overflow: hidden;
            height: 100vh;
            display: flex;
            justify-content: center;
            align-items: center;
        }

        .game-container {
            display: flex;
            align-items: center;
            gap: 50px;
            position: relative;
        }

        .tv-container {
            position: relative;
            width: 600px;
            height: 450px;
        }

        .tv-frame {
            width: 100%;
            height: 100%;
            position: absolute;
            top: 0;
            left: 0;
            z-index: 2;
            pointer-events: none;
        }

        .tv-screen {
            position: absolute;
            top: 10.6%;
            left: 5.5%;
            width: 73.3%;
            height: 80.5%;
            background: #000;
            z-index: 1;
            overflow: hidden;
        }

        .tv-video {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }

        .remote-control {
            display: flex;
            flex-direction: column;
            align-items: center;
            gap: 32px;
            background: linear-gradient(135deg, #10151a 60%, #0d0d0d 100%);
            padding: 38px 36px 38px 36px;
            border-radius: 32px;
            box-shadow: 0 0 32px 4px #00fff7cc, 0 0 0 4px #00fff733 inset, 0 8px 32px #00ffcc33;
            border: 2.5px solid #00fff7;
            position: relative;
        }

        .display {
            background: linear-gradient(90deg, #000 80%, #0ff 100%);
            color: #00ff00;
            padding: 18px 32px;
            border-radius: 14px;
            font-size: 22px;
            font-weight: bold;
            text-align: center;
            min-width: 170px;
            border: 2.5px solid #00ff00;
            box-shadow: 0 0 18px 2px #00ff00cc, 0 0 0 4px #00ff0033 inset;
            letter-spacing: 1.5px;
            text-shadow: 0 0 8px #00ff00, 0 0 2px #00ffcc;
            animation: display-glow 2.2s infinite alternate;
        }

        @@keyframes display-glow {
            0% { box-shadow: 0 0 10px #00ff00, 0 0 0 4px #00ff0033 inset; }
            100% { box-shadow: 0 0 30px #00ffcc, 0 0 0 8px #00ff0033 inset; }
        }

        .remote-button {
            width: 64px;
            height: 64px;
            border-radius: 50%;
            border: none;
            background: linear-gradient(145deg, #232b33 60%, #0d0d0d 100%);
            color: #00fff7;
            font-size: 28px;
            cursor: pointer;
            box-shadow: 0 2px 16px #00fff799, 0 0 0 2px #00fff733 inset, 0 4px 15px #00fff733;
            transition: all 0.2s cubic-bezier(.4,2,.6,1);
            display: flex;
            align-items: center;
            justify-content: center;
            position: relative;
        }

        .remote-button:hover {
            transform: scale(1.08) translateY(-2px);
            box-shadow: 0 0 32px 8px #00fff7cc, 0 0 0 4px #00fff799 inset;
            filter: brightness(1.2) drop-shadow(0 0 8px #00fff7);
        }

        .remote-button:active {
            transform: scale(0.97) translateY(1px);
        }

        .power-button {
            background: linear-gradient(145deg, #ff4444 60%, #cc3333 100%);
            color: #fff;
            box-shadow: 0 0 32px 8px #ff4444cc, 0 0 0 4px #ff444499 inset, 0 4px 15px #ff444433;
            animation: power-pulse 1.2s infinite alternate;
        }

        .power-button:hover {
            box-shadow: 0 0 40px 12px #ff4444cc, 0 0 0 8px #ff444499 inset;
            filter: brightness(1.2) drop-shadow(0 0 8px #ff4444);
        }

        @@keyframes power-pulse {
            0% { box-shadow: 0 0 32px 8px #ff4444cc, 0 0 0 4px #ff444499 inset; }
            100% { box-shadow: 0 0 60px 16px #ff4444cc, 0 0 0 12px #ff444499 inset; }
        }

        .code-section {
            position: absolute;
            bottom: -100px;
            left: 50%;
            transform: translateX(-50%);
            display: flex;
            flex-direction: column;
            align-items: center;
            gap: 15px;
        }

        .code-input {
            background: #000;
            border: 2px solid #00ffcc;
            color: #00ffcc;
            padding: 15px 20px;
            font-size: 18px;
            font-family: 'Courier New', monospace;
            border-radius: 10px;
            width: 300px;
            text-align: center;
            box-shadow: 0 0 10px rgba(0, 255, 204, 0.3);
        }

        .code-input::placeholder {
            color: #666;
        }

        .verify-button {
            background: linear-gradient(145deg, #00ffcc, #00cc99);
            color: #000;
            border: none;
            padding: 15px 30px;
            font-size: 16px;
            font-weight: bold;
            border-radius: 10px;
            cursor: pointer;
            font-family: 'Courier New', monospace;
            transition: all 0.3s ease;
        }

        .verify-button:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 20px rgba(0, 255, 204, 0.4);
        }

        .message {
            font-size: 18px;
            font-weight: bold;
            text-align: center;
            min-height: 30px;
        }

        .message.success {
            color: #00ff00;
        }

        .message.error {
            color: #ff4444;
        }

        .instructions-toggle {
            position: fixed;
            top: 40px;
            right: 40px;
            z-index: 2000;
            background: linear-gradient(135deg, #10151a 60%, #0d0d0d 100%);
            border: 2px solid #00fff7;
            border-radius: 50%;
            width: 56px;
            height: 56px;
            display: flex;
            align-items: center;
            justify-content: center;
            color: #00fff7;
            font-size: 2rem;
            box-shadow: 0 0 16px #00fff7cc;
            cursor: pointer;
            transition: background 0.2s, box-shadow 0.2s;
        }
        .instructions-toggle:hover {
            background: #00fff7;
            color: #10151a;
            box-shadow: 0 0 32px #00fff7cc;
        }
        .instructions-panel {
            position: fixed;
            top: 0;
            right: 0;
            height: 100vh;
            width: 420px;
            max-width: 95vw;
            background: #0a0a0a;
            border-left: 3px solid #00fff7;
            box-shadow: -4px 0 32px #00fff744;
            z-index: 2100;
            padding: 38px 32px 32px 32px;
            color: #00ffcc;
            font-family: 'Courier New', monospace;
            font-size: 1.08rem;
            display: flex;
            flex-direction: column;
            gap: 18px;
            transform: translateX(100%);
            transition: transform 0.35s cubic-bezier(.4,2,.6,1);
        }
        .instructions-panel.open {
            transform: translateX(0);
        }
        .instructions-panel h2 {
            color: #00fff7;
            font-size: 1.4rem;
            margin-bottom: 10px;
            letter-spacing: 1px;
        }
        .instructions-panel ul {
            margin-left: 18px;
            margin-bottom: 0;
        }
        .instructions-panel li {
            margin-bottom: 8px;
        }
        .instructions-close {
            position: absolute;
            top: 18px;
            right: 18px;
            font-size: 1.5rem;
            color: #00fff7;
            background: none;
            border: none;
            cursor: pointer;
            transition: color 0.2s;
        }
        .instructions-close:hover {
            color: #ff4444;
        }
        .intro-overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: #000;
            z-index: 1000;
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            color: #00ff00;
            font-family: 'Courier New', monospace;
            font-size: 22px;
            line-height: 1.6;
        }

        .intro-text {
            text-align: center;
            max-width: 800px;
            padding: 20px;
            min-height: 320px;
            letter-spacing: 1.2px;
            background: transparent;
        }

        .intro-cmd {
            text-align: left;
            white-space: pre-line;
            font-family: 'Courier New', monospace;
            color: #00ff00;
            font-size: 22px;
            background: transparent;
            min-height: 320px;
        }

        @@keyframes fadeIn {
            to {
                opacity: 1;
            }
        }

        .space-prompt {
            margin-top: 30px;
            font-size: 24px;
            color: #00ff00;
            animation: blink 1.5s infinite;
            font-family: 'Courier New', monospace;
            letter-spacing: 1.5px;
        }

        @@keyframes blink {
            0%, 50% { opacity: 1; }
            51%, 100% { opacity: 0; }
        }

        .hidden {
            display: none !important;
        }

        /* Efecto de error en la pantalla del televisor */
        .tv-error {
            box-shadow: 0 0 40px 10px #ff4444, 0 0 0 8px #ff4444 inset;
            background: #2a0000 !important;
            animation: tvErrorFlash 1s;
        }
        @@keyframes tvErrorFlash {
            0% { background: #2a0000; }
            50% { background: #ff4444; }
            100% { background: #2a0000; }
        }

        /* Fondo animado tipo terminal */
        .cmd-bg {
            position: fixed;
            top: 0;
            left: 0;
            width: 100vw;
            height: 100vh;
            z-index: 0;
            pointer-events: none;
            overflow: hidden;
            opacity: 0.18;
        }
        .cmd-bg-inner {
            width: 100vw;
            height: 100vh;
            font-family: 'Courier New', monospace;
            color: #00ff00;
            font-size: 18px;
            line-height: 1.2;
            white-space: pre;
            user-select: none;
        }

        body.rm-chaos-cursor {
            cursor: none !important;
        }
        #chaos-cursor {
            position: fixed;
            left: 0; top: 0;
            width: 64px; height: 64px;
            pointer-events: none;
            z-index: 99999;
            mix-blend-mode: lighten;
            filter: drop-shadow(0 0 12px #0f0) drop-shadow(0 0 24px #0ff);
            transition: filter 0.1s;
        }
        #chaos-cursor svg {
            width: 100%; height: 100%;
            display: block;
        }
        #chaos-cursor-canvas {
            position: fixed;
            left: 0; top: 0;
            width: 100vw; height: 100vh;
            pointer-events: none;
            z-index: 99998;
            mix-blend-mode: lighten;
        }
    </style>
</head>
<body>
    <!-- Botón de instrucciones -->
    <button class="instructions-toggle" id="instructionsToggle" title="Ver instrucciones">ℹ️</button>
    <div class="instructions-panel" id="instructionsPanel">
        <button class="instructions-close" id="instructionsClose" title="Cerrar">✖</button>
        <h2>Instrucciones - Room 2: Código Cinefílico</h2>
        <ul>
            <li><b>Objetivo:</b> Descifrar la palabra secreta y convertirla a binario para avanzar a la siguiente sala.</li>
            <li><b>Cómo jugar:</b>
                <ul>
                    <li>Usá el <b>control remoto</b> para cambiar de canal (botones 🔼 y 🔽).</li>
                    <li>Cada canal muestra un <b>clip de película</b> con una frase.</li>
                    <li>Anotá la <b>última letra</b> que se dice en cada canal (pueden ser varias letras, una por canal relevante).</li>
                    <li>Formá la palabra secreta con esas letras.</li>
                    <li>Convertí la palabra a <b>binario</b> usando la regla: <br><span style="color:#00fff7">A–M = 0, N–Z = 1</span> (por cada letra).</li>
                    <li>Ejemplo: "MORTY" → 0 1 1 1 1</li>
                    <li>Ingresá el código binario en el campo debajo del televisor y presioná "Verificar Código".</li>
                </ul>
            </li>
            <li><b>Control remoto:</b>
                <ul>
                    <li>🔼 Sube canal (1 a 5, rotativo).</li>
                    <li>🔽 Baja canal.</li>
                    <li>⏻ Enciende/apaga la TV. Al encender, hay 2s de estática antes de mostrar el canal.</li>
                    <li>Durante la estática, no se puede cambiar de canal.</li>
                </ul>
            </li>
            <li><b>Tips:</b>
                <ul>
                    <li>Si el código es correcto, avanzarás automáticamente.</li>
                    <li>Si es incorrecto, podés intentarlo de nuevo.</li>
                    <li>¡Prestá atención a las frases y a la última letra de cada una!</li>
                </ul>
            </li>
        </ul>
        <div style="margin-top:18px; color:#00fff7; font-size:0.98rem;">¿Dudas? Revisá bien los canales y la regla de binarización. ¡Suerte!</div>
    </div>

    <!-- Intro Overlay -->
    <div id="introOverlay" class="intro-overlay">
        <div class="intro-cmd" id="introText"></div>
    </div>

    <!-- Game Container -->
    <div class="game-container">
        <!-- TV Section -->
        <div class="tv-container">
            <img src="/img/televisorantiguo.png" alt="Televisor" class="tv-frame">
            <div class="tv-screen">
                <video id="tvVideo" class="tv-video">
                    <source src="/img/video1.mp4" type="video/mp4">
                </video>
            </div>
        </div>

        <!-- Remote Control -->
        <div class="remote-control">
            <div class="display" id="display">Canal 1</div>
            <button class="remote-button" id="upButton">🔼</button>
            <button class="remote-button power-button" id="powerButton">⏻</button>
            <button class="remote-button" id="downButton">🔽</button>
        </div>
    </div>

    <!-- Code Section -->
    <div class="code-section">
        <input type="text" id="codeInput" class="code-input" placeholder="Ej: 01001" maxlength="20">
        <button class="verify-button" id="verifyButton">Verificar Código</button>
        <div class="message" id="message"></div>
    </div>

    <!-- Fondo animado tipo terminal/cmd -->
    <div class="cmd-bg"><div class="cmd-bg-inner" id="cmdBg"></div></div>

    <!-- CURSOR CAÓTICO SCI-FI RICK&MORTY -->
    <div id="chaos-cursor">
        <svg viewBox="0 0 64 64">
            <g id="caret-group">
                <polyline id="caret" points="16,56 32,8 48,56" stroke="#00ff00" stroke-width="6" fill="none" stroke-linecap="round" stroke-linejoin="round"/>
                <polyline id="spike1" points="32,8 24,28" stroke="#0ff" stroke-width="3" fill="none"/>
                <polyline id="spike2" points="32,8 40,28" stroke="#fff" stroke-width="2" fill="none"/>
                <circle id="core" cx="32" cy="16" r="5" fill="#00ffcc" fill-opacity="0.7"/>
            </g>
            <g id="glitch-shapes"></g>
        </svg>
    </div>
    <canvas id="chaos-cursor-canvas" width="1920" height="1080"></canvas>

    <script>
        // Variables del juego
        let canalActual = 1;
        let encendida = true;
        let codigoCorrecto = "11111";
        let cambiandoCanal = false;

        // Elementos del DOM
        const tvVideo = document.getElementById('tvVideo');
        const display = document.getElementById('display');
        const upButton = document.getElementById('upButton');
        const downButton = document.getElementById('downButton');
        const powerButton = document.getElementById('powerButton');
        const codeInput = document.getElementById('codeInput');
        const verifyButton = document.getElementById('verifyButton');
        const message = document.getElementById('message');
        const introOverlay = document.getElementById('introOverlay');
        const introText = document.getElementById('introText');

        // Texto de intro
        const introLines = [
            "[DECODIFICANDO SEÑAL MULTIVERSAL...]",
            "[✔] Canal 137 conectado...",
            "[✔] Señal de audio restaurada...",
            "",
            "Rick: Morty, despertá, estamos atrapados en una sala hecha de películas.",
            "Morty: ¿Q-qué? ¿Dónde estamos ahora Rick?",
            "Rick: Cada canal muestra un clip real con una frase. La clave está en la última letra que se dice.",
            "Rick: Vas anotando letra por letra. Después formás una palabra.",
            "Rick: A esa palabra la pasás a binario. Regla: A–M = 0, N–Z = 1.",
            "Rick: Poné ese binario abajo. Si es correcto, salimos. Si no... nos quedamos atrapados.",
            "Morty: Rick, tengo miedo...",
            "Rick: Tocá ESPACIO para empezar.",
            "",
            "[Presioná ESPACIO para comenzar]"
        ];

        // Función para mostrar intro tipo consola (typewriter)
        function mostrarIntro() {
            const text = introLines.join("\n");
            let i = 0;
            introText.textContent = "";
            function typeWriter() {
                if (i < text.length) {
                    introText.textContent += text.charAt(i);
                    i++;
                    setTimeout(typeWriter, 18);
                }
            }
            typeWriter();
        }

        // Función para cambiar canal
        function cambiarCanal(nuevoCanal) {
            if (!encendida || cambiandoCanal) return;
            
            cambiandoCanal = true;
            
            // Mostrar estática
            tvVideo.src = '/img/video0.mp4';
            tvVideo.load();
            tvVideo.muted = false;
            tvVideo.volume = 1;
            tvVideo.play();
            
            // Después de 2 segundos, cambiar al canal
            setTimeout(() => {
                canalActual = nuevoCanal;
                tvVideo.src = `/img/video${canalActual}.mp4`;
                tvVideo.load();
                tvVideo.muted = false;
                tvVideo.volume = 1;
                tvVideo.play();
                display.textContent = `Canal ${canalActual}`;
                cambiandoCanal = false;
            }, 2000);
        }

        // Función para encender/apagar TV
        function toggleTV() {
            encendida = !encendida;
            
            if (encendida) {
                display.textContent = `Canal ${canalActual}`;
                // Mostrar estática por 2 segundos
                tvVideo.src = '/img/video0.mp4';
                tvVideo.load();
                tvVideo.muted = false;
                tvVideo.volume = 1;
                tvVideo.play();
                
                setTimeout(() => {
                    tvVideo.src = `/img/video${canalActual}.mp4`;
                    tvVideo.load();
                    tvVideo.muted = false;
                    tvVideo.volume = 1;
                    tvVideo.play();
                }, 2000);
            } else {
                display.textContent = "TV Apagada";
                tvVideo.pause();
                tvVideo.style.opacity = "0.3";
            }
        }

        // Función para verificar código
        function verificarCodigo() {
            const codigoIngresado = codeInput.value.trim();
            
            if (codigoIngresado === codigoCorrecto) {
                message.textContent = "✅ ¡Correcto! Desbloqueando...";
                message.className = "message success";
                // Animación épica de desbloqueo
                mostrarAnimacionDesbloqueo();
                // Llamada fetch para marcar la room como completada
                fetch('/Home/CompleteRoom/2', { method: 'POST' })
                  .then(() => {
                      setTimeout(() => {
                          window.location.href = '/Home/Room3';
                      }, 3200);
                  });
            } else {
                message.textContent = "❌ Código incorrecto. Inténtalo de nuevo.";
                message.className = "message error";
                // Efecto de error en la pantalla del televisor
                const tvScreen = document.querySelector('.tv-screen');
                tvScreen.classList.add('tv-error');
                setTimeout(() => {
                    tvScreen.classList.remove('tv-error');
                }, 1000);
            }
        }

        // Animación épica de desbloqueo
        function mostrarAnimacionDesbloqueo() {
            if (document.getElementById('epicUnlock')) return;
            const overlay = document.createElement('div');
            overlay.id = 'epicUnlock';
            overlay.style.position = 'fixed';
            overlay.style.top = 0;
            overlay.style.left = 0;
            overlay.style.width = '100vw';
            overlay.style.height = '100vh';
            overlay.style.background = 'radial-gradient(circle at 50% 50%, #00fff7 0%, #0a0a0a 80%)';
            overlay.style.zIndex = 5000;
            overlay.style.display = 'flex';
            overlay.style.flexDirection = 'column';
            overlay.style.justifyContent = 'center';
            overlay.style.alignItems = 'center';
            overlay.style.animation = 'fadeInEpic 0.5s';
            overlay.innerHTML = `
                <div style="font-family:'Courier New',monospace;font-size:2.5rem;color:#0a0a0a;text-shadow:0 0 18px #00fff7,0 0 2px #fff;font-weight:bold;letter-spacing:2px;animation:glowEpic 1.2s infinite alternate;">¡SALA DESBLOQUEADA!</div>
                <div style="margin-top:32px;font-size:1.3rem;color:#00fff7;text-shadow:0 0 8px #fff;letter-spacing:1.5px;">Accediendo a la siguiente dimensión...</div>
                <div style="margin-top:48px;">
                    <svg width="120" height="120" viewBox="0 0 120 120">
                        <circle cx="60" cy="60" r="48" stroke="#00fff7" stroke-width="8" fill="none" stroke-dasharray="300" stroke-dashoffset="0">
                            <animate attributeName="stroke-dashoffset" from="300" to="0" dur="2s" fill="freeze" />
                        </circle>
                        <circle cx="60" cy="60" r="32" stroke="#00ffcc" stroke-width="4" fill="none" stroke-dasharray="200" stroke-dashoffset="0">
                            <animate attributeName="stroke-dashoffset" from="200" to="0" dur="1.5s" fill="freeze" />
                        </circle>
                        <circle cx="60" cy="60" r="16" stroke="#00ff99" stroke-width="2" fill="none" stroke-dasharray="100" stroke-dashoffset="0">
                            <animate attributeName="stroke-dashoffset" from="100" to="0" dur="1s" fill="freeze" />
                        </circle>
                    </svg>
                </div>
            `;
            document.body.appendChild(overlay);
            // Animación de fade out antes de redirigir
            setTimeout(() => {
                overlay.style.transition = 'opacity 0.8s';
                overlay.style.opacity = 0;
            }, 2700);
        }

        // Animaciones CSS para el overlay
        const styleEpic = document.createElement('style');
        styleEpic.innerHTML = `
        @@keyframes fadeInEpic { from { opacity: 0; } to { opacity: 1; } }
        @@keyframes glowEpic { 0% { text-shadow: 0 0 18px #00fff7,0 0 2px #fff; } 100% { text-shadow: 0 0 32px #00fff7,0 0 8px #fff; } }
        `;
        document.head.appendChild(styleEpic);

        // Event listeners
        upButton.addEventListener('click', () => {
            if (encendida) {
                const nuevoCanal = canalActual === 5 ? 1 : canalActual + 1;
                cambiarCanal(nuevoCanal);
            }
        });

        downButton.addEventListener('click', () => {
            if (encendida) {
                const nuevoCanal = canalActual === 1 ? 5 : canalActual - 1;
                cambiarCanal(nuevoCanal);
            }
        });

        powerButton.addEventListener('click', toggleTV);

        verifyButton.addEventListener('click', verificarCodigo);

        codeInput.addEventListener('keypress', (e) => {
            if (e.key === 'Enter') {
                verificarCodigo();
            }
        });

        // Manejo de la intro
        document.addEventListener('keydown', (e) => {
            if (e.code === 'Space' && !introOverlay.classList.contains('hidden')) {
                e.preventDefault();
                introOverlay.classList.add('hidden');
                // Iniciar video solo cuando termina la intro
                setTimeout(() => {
                    tvVideo.src = `/img/video${canalActual}.mp4`;
                    tvVideo.load();
                    tvVideo.muted = false;
                    tvVideo.volume = 1;
                    tvVideo.play();
                }, 100);
            }
        });

        // Menú de instrucciones
        const instructionsToggle = document.getElementById('instructionsToggle');
        const instructionsPanel = document.getElementById('instructionsPanel');
        const instructionsClose = document.getElementById('instructionsClose');

        instructionsToggle.addEventListener('click', () => {
            instructionsPanel.classList.add('open');
        });
        instructionsClose.addEventListener('click', () => {
            instructionsPanel.classList.remove('open');
        });
        // Cerrar con ESC
        document.addEventListener('keydown', (e) => {
            if (e.key === 'Escape') {
                instructionsPanel.classList.remove('open');
            }
        });

        // Inicializar
        mostrarIntro();
        
        // Restaurar opacidad del video si la TV está encendida
        if (encendida) {
            tvVideo.style.opacity = "1";
            tvVideo.muted = false;
            tvVideo.volume = 1;
        }

        // Fondo animado tipo terminal/cmd
        const cmdBg = document.getElementById('cmdBg');
        const cmdLines = [
            'C137> DECODING MULTIVERSAL SIGNAL... [OK]',
            'C137> ACCESSING CHANNEL 1... [OK]',
            'C137> SIGNAL RESTORED',
            'C137> Rick: Morty, ¿ves esto?',
            'C137> Morty: ¿Por qué hay tanto código?',
            'C137> Rick: Es la única forma de salir...',
            'C137> SYSTEM: Awaiting input...',
            'C137> [WARN] Channel static detected',
            'C137> [INFO] Last letter is the key',
            'C137> [TIP] A-M = 0, N-Z = 1',
            'C137> [ERROR] Invalid code. Try again.',
            'C137> [SYS] Room2 unlocked',
            'C137> [SYS] Room3 access granted',
            'C137> Rick: ¡Morty, apurate!',
            'C137> Morty: ¡No entiendo nada Rick!',
            'C137> Rick: Usá el control remoto...',
            'C137> [LOOP] ...',
            'C137> [LOOP] ...',
            'C137> [LOOP] ...',
        ];
        let cmdBuffer = [];
        let cmdScroll = 0;
        function addCmdLine() {
            const line = cmdLines[Math.floor(Math.random() * cmdLines.length)];
            cmdBuffer.push(line);
            if (cmdBuffer.length > 32) cmdBuffer.shift();
            cmdBg.textContent = cmdBuffer.join('\n');
        }
        setInterval(addCmdLine, 90);

        // --- Cursor SVG follow ---
        document.body.classList.add('rm-chaos-cursor');
        const cursor = document.getElementById('chaos-cursor');
        const canvas = document.getElementById('chaos-cursor-canvas');
        const ctx = canvas.getContext('2d');
        let mouse = {x: window.innerWidth/2, y: window.innerHeight/2};
        let cursorPos = {x: mouse.x, y: mouse.y};
        let t = 0;
        // Resize canvas
        function resize() {
            canvas.width = window.innerWidth;
            canvas.height = window.innerHeight;
        }
        window.addEventListener('resize', resize);
        resize();
        // Mouse move
        document.addEventListener('mousemove', e => {
            mouse.x = e.clientX;
            mouse.y = e.clientY;
        });
        // Cursor follow
        function lerp(a,b,s){return a+(b-a)*s;}
        // --- Glitchy cursor animation ---
        function animateCursor() {
            t += 0.08;
            cursorPos.x = lerp(cursorPos.x, mouse.x, 0.35);
            cursorPos.y = lerp(cursorPos.y, mouse.y, 0.35);
            cursor.style.transform = `translate(${cursorPos.x-32}px,${cursorPos.y-32}px) scale(${1+Math.sin(t*2)*0.08}) rotate(${Math.sin(t*1.2)*7}deg)`;
            // SVG color/shape chaos
            const caret = document.getElementById('caret');
            const spike1 = document.getElementById('spike1');
            const spike2 = document.getElementById('spike2');
            const core = document.getElementById('core');
            caret.setAttribute('stroke',`hsl(${120+Math.sin(t*2)*80},100%,${60+Math.sin(t*3)*20}%)`);
            spike1.setAttribute('stroke',`hsl(${180+Math.cos(t*2.5)*120},100%,70%)`);
            spike2.setAttribute('stroke',`hsl(${320+Math.sin(t*4)*80},100%,90%)`);
            core.setAttribute('fill',`hsl(${120+Math.sin(t*5)*120},100%,70%)`);
            core.setAttribute('r',5+Math.abs(Math.sin(t*3))*3);
            // Glitch shapes
            const glitchShapes = document.getElementById('glitch-shapes');
            glitchShapes.innerHTML = '';
            for(let i=0;i<3+Math.floor(Math.random()*3);i++){
                let ang = Math.random()*2*Math.PI;
                let r = 18+Math.random()*22;
                let x = 32+Math.cos(ang)*r;
                let y = 32+Math.sin(ang)*r;
                let c = `hsl(${Math.random()*360},100%,60%)`;
                let s = 2+Math.random()*6;
                glitchShapes.innerHTML += `<rect x="${x-s/2}" y="${y-s/2}" width="${s}" height="${s}" fill="${c}" fill-opacity="${0.5+Math.random()*0.5}"/>`;
            }
            requestAnimationFrame(animateCursor);
        }
        animateCursor();
        // --- Canvas chaos: particles, flashes, cosmic ---
        const quotes = [
            '¿Somos parte del código o del error?',
            '¿Y si el sistema somos nosotros?',
            '¿Qué versión de vos vive en este bucle?',
            '¿Quién está mirando desde el otro lado?',
            '¿El bug es el mensaje?'
        ];
        let particles = [];
        function spawnParticle(x,y) {
            let angle = Math.random()*2*Math.PI;
            let speed = 2+Math.random()*3;
            let color = `hsl(${Math.random()*360},100%,60%)`;
            let life = 18+Math.random()*18;
            let size = 2+Math.random()*6;
            particles.push({x,y,dx:Math.cos(angle)*speed,dy:Math.sin(angle)*speed,color,life,size});
        }
        // Flash effect
        let flash = 0;
        function triggerFlash() { flash = 1.2; }
        // On click, cosmic explosion
        document.addEventListener('mousedown', e => {
            for(let i=0;i<32;i++) spawnParticle(mouse.x,mouse.y);
            triggerFlash();
        });
        // Main render loop
        function renderChaos() {
            ctx.clearRect(0,0,canvas.width,canvas.height);
            // Fullscreen flash
            if(flash>0.01) {
                ctx.save();
                ctx.globalAlpha = Math.min(flash,1)*0.33;
                ctx.fillStyle = `hsl(${120+Math.sin(t*8)*120},100%,90%)`;
                ctx.fillRect(0,0,canvas.width,canvas.height);
                ctx.restore();
                flash *= 0.88;
            }
            // Particles
            for(let i=particles.length-1;i>=0;i--){
                let p=particles[i];
                ctx.save();
                ctx.globalAlpha = Math.max(0,p.life/36)*0.7;
                ctx.beginPath();
                ctx.arc(p.x,p.y,p.size,0,2*Math.PI);
                ctx.fillStyle = p.color;
                ctx.shadowColor = p.color;
                ctx.shadowBlur = 16;
                ctx.fill();
                ctx.restore();
                p.x+=p.dx; p.y+=p.dy; p.life--;
                p.dx*=0.97; p.dy*=0.97;
                if(p.life<0) particles.splice(i,1);
            }
            // Matrix overlay
            if(Math.random()<0.18) {
                ctx.save();
                ctx.globalAlpha = 0.13+Math.random()*0.09;
                ctx.font = `${18+Math.random()*18}px monospace`;
                ctx.fillStyle = '#0f0';
                for(let i=0;i<16;i++){
                    let x = Math.random()*canvas.width;
                    let y = Math.random()*canvas.height;
                    ctx.fillText('█▓▒░',x,y);
                }
                ctx.restore();
            }
            // Flicker philosophical quote (imperceptible)
            if(Math.random()<0.04) {
                ctx.save();
                ctx.globalAlpha = 0.08+Math.random()*0.07;
                ctx.font = `${16+Math.random()*16}px monospace`;
                ctx.fillStyle = '#fff';
                let q = quotes[Math.floor(Math.random()*quotes.length)];
                let x = Math.random()*canvas.width;
                let y = Math.random()*canvas.height;
                ctx.fillText(q,x,y);
                ctx.restore();
            }
            requestAnimationFrame(renderChaos);
        }
        renderChaos();
    </script>
        @Html.Partial("_NavMenu")
</body>
</html>
