@{
    Layout = null;
}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <title>✰</title>
    <link rel="stylesheet" href="~/css/site.css" />
    <link rel="icon" type="image/png" href="~/img/morty-icon.png" />
    <style>
        :root {
            --neon-green: #00ff00;
            --neon-blue: #00ffff;
            --neon-red: #ff0000;
            --neon-purple: #ff00ff;
            --matrix-bg: #001100;
        }

        body {
            background: transparent !important; 
            color: var(--neon-green);
            font-family: 'Courier New', monospace;
            padding: 40px;
            margin: 0;
            min-height: 100vh;
            overflow-x: hidden;
            position: relative;
        }

        .matrix-background {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            pointer-events: none;
            z-index: -1;
            opacity: 0.15;
        }

        .glitch-container {
            position: relative;
        }

        .glitch-text {
            position: relative;
            animation: glitch 3s infinite;
        }

        .glitch-text::before,
        .glitch-text::after {
            content: attr(data-text);
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
        }

        .glitch-text::before {
            left: 2px;
            text-shadow: -2px 0 var(--neon-red);
            clip: rect(24px, 550px, 90px, 0);
            animation: glitch-anim 3s infinite linear alternate-reverse;
        }

        .glitch-text::after {
            left: -2px;
            text-shadow: -2px 0 var(--neon-blue);
            clip: rect(85px, 550px, 140px, 0);
            animation: glitch-anim2 2.5s infinite linear alternate-reverse;
        }

        @@keyframes glitch {
            2%, 64% { transform: translate(2px,0) skew(0deg); }
            4%, 60% { transform: translate(-2px,0) skew(0deg); }
            62% { transform: translate(0,0) skew(5deg); }
        }

        @@keyframes glitch-anim {
            0% { clip: rect(51px, 9999px, 28px, 0); }
            20% { clip: rect(41px, 9999px, 76px, 0); }
            40% { clip: rect(16px, 9999px, 33px, 0); }
            60% { clip: rect(89px, 9999px, 11px, 0); }
            80% { clip: rect(71px, 9999px, 98px, 0); }
            100% { clip: rect(6px, 9999px, 46px, 0); }
        }

        @@keyframes glitch-anim2 {
            0% { clip: rect(65px, 9999px, 99px, 0); }
            20% { clip: rect(34px, 9999px, 12px, 0); }
            40% { clip: rect(87px, 9999px, 54px, 0); }
            60% { clip: rect(22px, 9999px, 91px, 0); }
            80% { clip: rect(45px, 9999px, 78px, 0); }
            100% { clip: rect(18px, 9999px, 67px, 0); }
        }

        #tablero {
            display: grid;
            grid-template-columns: repeat(8, minmax(40px, 1fr));
            gap: 4px;
            margin: 30px auto;
            max-width: 600px;
            padding: 20px;
            background: rgba(0, 20, 0, 0.3);
            border: 2px solid var(--neon-green);
            box-shadow: 0 0 20px rgba(0, 255, 0, 0.2);
            position: relative;
            transform-style: preserve-3d;
            perspective: 1000px;
        }

        #tablero::before {
            content: '';
            position: absolute;
            inset: -2px;
            background: linear-gradient(45deg, 
                transparent 0%, 
                rgba(0,255,0,0.2) 45%, 
                rgba(0,255,0,0.8) 50%,
                rgba(0,255,0,0.2) 55%,
                transparent 100%
            );
            z-index: -1;
            animation: borderGlow 3s linear infinite;
        }

        @@keyframes borderGlow {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        .celda {
            width: 100%;
            aspect-ratio: 1;
            border: 1px solid var(--neon-green);
            transition: all 0.3s ease;
            position: relative;
            cursor: pointer;
        }

        .celda::before {
            content: '';
            position: absolute;
            inset: 0;
            background: currentColor;
            opacity: 0;
            transition: opacity 0.3s;
        }

        .celda:hover::before {
            opacity: 0.2;
        }

        .blanco {
            background-color: rgba(255, 255, 255, 0.9);
            box-shadow: 0 0 10px rgba(255, 255, 255, 0.5);
        }

        .negro {
            background-color: rgba(0, 0, 0, 0.9);
            box-shadow: inset 0 0 10px rgba(0, 255, 0, 0.3);
        }

        .destacado {
            animation: highlightPulse 2s infinite;
        }

        @@keyframes highlightPulse {
            0% { box-shadow: 0 0 5px var(--neon-green); }
            50% { box-shadow: 0 0 20px var(--neon-green), 0 0 30px var(--neon-blue); }
            100% { box-shadow: 0 0 5px var(--neon-green); }
        }

        .input-container {
            position: relative;
            max-width: 400px;
            margin: 30px auto;
            padding: 20px;
            background: rgba(0, 20, 0, 0.2);
            border: 1px solid var(--neon-green);
            box-shadow: 0 0 15px rgba(0, 255, 0, 0.1);
            border-radius: 5px;
            transform: scale(0.9); /* Asegura que se vea bien sin necesidad de zoom out */
        }

        .input-container p {
            margin: 0 0 15px 0;
            color: var(--neon-green);
            font-size: 16px;
            text-shadow: 0 0 5px rgba(0, 255, 0, 0.5);
        }

        input {
            width: 100%;
            background: transparent;
            border: none;
            border-bottom: 2px solid var(--neon-green);
            color: var(--neon-green);
            font-family: 'Courier New', monospace;
            font-size: 18px;
            padding: 10px 5px;
            outline: none;
            transition: all 0.3s;
        }

        input:focus {
            border-bottom-color: var(--neon-blue);
            box-shadow: 0 5px 15px rgba(0, 255, 255, 0.2);
        }

        .input-container::before {
            content: '>';
            position: absolute;
            left: -20px;
            top: 50%;
            transform: translateY(-50%);
            color: var(--neon-green);
            animation: blink 1s infinite;
        }

        @@keyframes blink {
            50% { opacity: 0; }
        }

        button {
            background: transparent;
            border: 2px solid var(--neon-green);
            color: var(--neon-green);
            padding: 12px 30px;
            font-family: 'Courier New', monospace;
            font-size: 16px;
            cursor: pointer;
            position: relative;
            overflow: hidden;
            transition: all 0.3s;
            text-transform: uppercase;
            letter-spacing: 2px;
            margin: 20px 0;
        }

        button::before {
            content: '';
            position: absolute;
            top: -50%;
            left: -50%;
            width: 200%;
            height: 200%;
            background: linear-gradient(
                45deg,
                transparent,
                rgba(0, 255, 0, 0.2),
                transparent
            );
            transform: rotate(45deg);
            animation: buttonShine 3s infinite;
        }

        @@keyframes buttonShine {
            0% { transform: translateX(-100%) rotate(45deg); }
            100% { transform: translateX(100%) rotate(45deg); }
        }

        button:hover {
            background: rgba(0, 255, 0, 0.1);
            box-shadow: 0 0 20px rgba(0, 255, 0, 0.3);
            transform: translateY(-2px);
        }

        .mensaje {
            margin-top: 20px;
            padding: 15px;
            text-align: center;
            font-size: 18px;
            opacity: 0;
            transition: opacity 0.3s;
        }

        .mensaje.show {
            opacity: 1;
        }

        .portal-container {
            position: fixed;
            pointer-events: none;
            z-index: 100;
        }

        .portal {
            position: absolute;
            width: 150px;
            height: 150px;
            border-radius: 50%;
            background: conic-gradient(
                from 0deg,
                var(--neon-green),
                var(--neon-blue),
                var(--neon-purple),
                var(--neon-green)
            );
            filter: blur(10px);
            animation: portalPulse 2s infinite;
        }

        @@keyframes portalPulse {
            0% { transform: scale(1); opacity: 0.8; }
            50% { transform: scale(1.2); opacity: 1; }
            100% { transform: scale(1); opacity: 0.8; }
        }

        .portal::before {
            content: '';
            position: absolute;
            inset: 10px;
            border-radius: 50%;
            background: black;
            filter: blur(5px);
        }

        .rick-console-hint {
            position: fixed;
            bottom: 20px;
            right: 20px;
            background: rgba(0, 0, 0, 0.8);
            padding: 15px;
            border: 1px solid var(--neon-red);
            color: var(--neon-red);
            font-size: 14px;
            max-width: 300px;
            animation: hintPulse 2s infinite;
        }

        @@keyframes hintPulse {
            0% { transform: scale(1); }
            50% { transform: scale(1.05); }
            100% { transform: scale(1); }
        }

        #rick-gif {
            position: fixed;
            bottom: 20px;
            left: 20px;
            width: 200px;
            filter: drop-shadow(0 0 10px rgba(0, 255, 0, 0.5));
            transform: scaleX(-1);
            display: none;
        }

        .binary-rain {
            position: fixed;
            top: 0;
            left: 0;
            width: 100vw;
            height: 100vh;
            pointer-events: none;
            z-index: 1;
            opacity: 0.15;
            display: block;
        }
#balatro-bg {
    position: fixed;
    inset: 0;
    width: 100vw;
    height: 100vh;
    z-index: -1000;
    pointer-events: none;
    display: block;
}

        #rick-pistas {
            position: fixed;
            bottom: 70px;
            right: 20px;
            font-size: 14px;
            color: var(--neon-green);
            max-width: 300px;
            text-align: right;
            transition: all 0.3s;
        }

        .intro-sequence {
            position: fixed;
            top: 0;
            left: 0;
            width: 100vw;
            height: 100vh;
            background: black;
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            z-index: 9999;
            color: var(--neon-green);
            font-family: 'VT323', monospace;
            text-align: center;
            opacity: 1;
            animation: fadeOut 2s forwards;
            animation-delay: 12s;
            overflow: hidden;
        }

        .intro-text {
            max-width: 800px;
            padding: 20px;
            opacity: 0;
            transform: translateY(20px);
            position: relative;
            text-shadow: 0 0 10px var(--neon-green);
        }

        .intro-text:nth-child(1) { animation: fadeInUp 2s forwards; }
        .intro-text:nth-child(2) { animation: fadeInUp 2s forwards; animation-delay: 2s; }
        .intro-text:nth-child(3) { animation: fadeInUp 2s forwards; animation-delay: 4s; }
        .intro-text:nth-child(4) { animation: fadeInUp 2s forwards; animation-delay: 6s; }
        .intro-text::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent, rgba(0,255,0,0.4), transparent);
            animation: scanline 1s linear infinite;
        }

        @@keyframes fadeInUp {
            from {
                opacity: 0;
                transform: translateY(20px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        @@keyframes scanline {
            0% { left: -100%; }
            100% { left: 100%; }
        }

        .intro-text h2 {
            font-size: 2.5em;
            margin-bottom: 0.5em;
            position: relative;
            display: inline-block;
            text-shadow: 0 0 15px var(--neon-green),
                         0 0 30px var(--neon-green),
                         0 0 45px var(--neon-green);
        }

        .intro-text p {
            margin: 0.8em 0;
            text-shadow: 0 0 8px var(--neon-green);
        }

        .warning {
            color: #ffff00;
            text-shadow: 0 0 10px #ffff00,
                         0 0 20px #ffff00;
            animation: pulse 1s infinite;
        }

        .danger {
            color: #ff0000;
            text-shadow: 0 0 10px #ff0000,
                         0 0 20px #ff0000;
            animation: pulse 0.5s infinite;
        }

        @@keyframes pulse {
            0% { opacity: 1; }
            50% { opacity: 0.7; }
            100% { opacity: 1; }
        }

        .binary-overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            pointer-events: none;
            z-index: 9998;
            opacity: 0.1;
            animation: binaryFade 5s infinite;
        }

        @@keyframes binaryFade {
            0%, 100% { opacity: 0.1; }
            50% { opacity: 0.2; }
        }

        @@keyframes glitchText {
            0% { transform: translateX(0); }
            20% { transform: translateX(-2px); }
            40% { transform: translateX(2px); }
            60% { transform: skewX(4deg); }
            80% { transform: skewX(-4deg); }
            100% { transform: skewX(0deg); }
        }

        @@keyframes glitch-1 {
            0% { clip: rect(132px, 350px, 101px, 30px); }
            20% { clip: rect(116px, 350px, 67px, 30px); }
            40% { clip: rect(121px, 350px, 132px, 30px); }
            60% { clip: rect(61px, 350px, 11px, 30px); }
            80% { clip: rect(78px, 350px, 142px, 30px); }
            100% { clip: rect(40px, 350px, 56px, 30px); }
        }

        @@keyframes glitch-2 {
            0% { top: -1px; left: 1px; }
            20% { top: 1px; left: -1px; }
            40% { top: -1px; left: -1px; }
            60% { top: 1px; left: 1px; }
            80% { top: -1px; left: -1px; }
            100% { top: 1px; left: 1px; }
        }

        .lore-panel {
            position: fixed;
            top: 20px;
            right: -350px;
            width: 300px;
            background: rgba(0, 0, 0, 0.9);
            border: 1px solid var(--neon-green);
            padding: 15px;
            color: var(--neon-green);
            font-size: 14px;
            transition: transform 0.5s cubic-bezier(0.23, 1, 0.32, 1);
            z-index: 100;
            box-shadow: 0 0 20px rgba(0, 255, 0, 0.2);
        }

        .lore-panel.show {
            transform: translateX(-370px);
        }

        .lore-toggle {
            position: fixed;
            top: 20px;
            right: 20px;
            background: rgba(0, 0, 0, 0.8);
            border: 1px solid var(--neon-green);
            color: var(--neon-green);
            padding: 8px 15px;
            cursor: pointer;
            z-index: 101;
            text-transform: uppercase;
            letter-spacing: 1px;
            font-size: 12px;
            transition: all 0.3s;
            box-shadow: 0 0 10px rgba(0, 255, 0, 0.2);
        }

        .lore-toggle:hover {
            background: rgba(0, 255, 0, 0.2);
            box-shadow: 0 0 20px rgba(0, 255, 0, 0.4);
        }

        .glitch-overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            pointer-events: none;
            z-index: 9998;
            mix-blend-mode: screen;
            opacity: 0;
        }

        .screen-glitch {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 255, 0, 0.1);
            pointer-events: none;
            z-index: 9997;
            opacity: 0;
            mix-blend-mode: screen;
        }

        @@keyframes screenFlash {
            0%, 100% { opacity: 0; }
            50% { opacity: 0.03; }
            52% { opacity: 0.08; }
            54% { opacity: 0.02; }
            56% { opacity: 0.07; }
            58% { opacity: 0; }
        }

        @@keyframes screenError {
            0% { transform: translateX(0); }
            2% { transform: translateX(-10px); }
            4% { transform: translateX(10px); }
            6% { transform: translateX(-5px); }
            8% { transform: translateX(5px); }
            10% { transform: translateX(0); }
        }

        .flash-screen {
            position: fixed;
            width: 100vw;
            height: 100vh;
            background: white;
            z-index: 10000;
            animation: flashBang 1.2s ease-out;
        }
        @@keyframes flashBang {
            0% { opacity: 1; }
            20% { opacity: 1; }
            100% { opacity: 0; visibility: hidden; }
        }
        .explosion {
            animation: shake 0.7s ease-in-out;
        }
        @@keyframes shake {
            0%, 100% { transform: translate(0); }
            20% { transform: translate(6px, -6px); }
            40% { transform: translate(-6px, 6px); }
            60% { transform: translate(6px, 6px); }
            80% { transform: translate(-6px, -6px); }
        }
    </style>
</head>
<body>
<canvas id="balatro-bg"></canvas>

    <canvas class="binary-rain" id="binaryRain"></canvas>

    <div class="glitch-container">
        <h1 id="titulo-room2" class="glitch-text" data-text="Room 2: Parche Binario"></h1>
    </div>

    <div class="container">
        <p class="glitch-text" data-text="Instrucción:">
            Leé los <span style="color:lime">cuadrados verdes</span> como bits, en orden 
            <strong>de izquierda a derecha y de arriba hacia abajo</strong>. 
            Las celdas blancas valen 1, las negras 0.
        </p>

        <div id="tablero"></div>

        <div class="input-container">
            <p>Convertí ese binario a decimal:</p>
            <input type="text" id="respuesta" placeholder="ej: 280" autocomplete="off" />
            <button onclick="verificar()">DECODIFICAR</button>
        </div>

        <div class="mensaje" id="mensaje"></div>
    </div>

    <div id="portales"></div>
    <div id="rick-pistas"></div>

    <div class="rick-console-hint">
        Rick: M-morty... si nada funciona... fijate si el F12 te responde algo...
    </div>

    <div class="intro-sequence">
        <div class="binary-overlay"></div>
        <div class="intro-text">
            <h2>[ALERTA DEL SISTEMA]</h2>
            <p>Anomalía temporal detectada en el sector C-137</p>
            <h2 data-text="[ALERTA DEL SISTEMA]">[ALERTA DEL SISTEMA]</h2>
            <p class="warning">⚠️ ANOMALÍA TEMPORAL CRÍTICA DETECTADA ⚠️</p>
            <p>Sector C-137: Múltiples fracturas en la línea temporal principal</p>
            <p class="danger">NIVEL DE AMENAZA: CRÍTICO</p>
        </div>
        <div class="intro-text">
            <p>El hacker ha encontrado una vulnerabilidad en el framework temporal</p>
            <p>Cada decisión crea una nueva línea temporal corrupta</p>
            <h2 data-text="[ANÁLISIS DE DAÑOS]">[ANÁLISIS DE DAÑOS]</h2>
            <p>Bucles temporales multiplicándose exponencialmente</p>
            <p>Integridad dimensional: 32% y descendiendo</p>
            <p class="warning">Colapso total estimado en: T-MINUS 10:00</p>
        </div>
        <div class="intro-text">
            <h2 data-text="[TRANSMISIÓN ENTRANTE]">[TRANSMISIÓN ENTRANTE]</h2>
            <p>Rick: M-morty, *burp* esto es malo... muy malo...</p>
            <p>Rick: El framework temporal se está desgarrando</p>
            <p>Morty: Oh jeez Rick, ¿qué-qué está pasando?</p>
            <p>Rick: ¡Las líneas de código están vivas, Morty! ¡VIVAS! Y el hacker las está usando contra nosotros</p>
        </div>
        <div class="intro-text">
            <p>Rick: Decodifica el patrón binario, Morty. Es la única forma de encontrar la vulnerabilidad que el hacker está explotando.</p>
            <p>La realidad depende de ti...</p>
            <h2 data-text="[PROTOCOLO DE EMERGENCIA]">[PROTOCOLO DE EMERGENCIA]</h2>
            <p>Rick: Solo hay una forma de detener al hacker, Morty...</p>
            <p>Rick: Decodifica el patrón binario antes de que sea tarde</p>
            <p class="danger">INICIANDO SECUENCIA DE CONTENCIÓN...</p>
            <p class="warning">La realidad misma depende de ti, Morty...</p>
        </div>
    </div>

    <button class="lore-toggle" onclick="toggleLore()">EXPLICACIÓN ⚠️</button>
    <div class="lore-panel" id="lorePanel">
        <h3>La Paradoja del Tiempo</h3>
        <p>En esta habitación, el hacker ha encontrado una vulnerabilidad crítica en el framework temporal. Cada bit del código binario representa un momento congelado en el tiempo, una decisión que el hacker está manipulando para crear líneas temporales corruptas.</p>
        <p>Rick descubrió que el hacker está usando estas bifurcaciones temporales como un vector de ataque, creando un laberinto de posibilidades infinitas para confundir y debilitar las defensas del sistema. La única forma de detener el ataque es decodificar el patrón oculto en la matriz binaria.</p>
        <p>Cada intento fallido crea una nueva línea temporal corrupta, multiplicando exponencialmente el caos. El Consejo de Ricks ha detectado que si no se resuelve pronto, el hacker podría usar el colapso de todas estas realidades para obtener acceso total al framework de la existencia.</p>
    </div>

    <div id="troll-bits"></div>

    <script src="~/js/site.js"></script>
    <script>
    // Reemplazo dinámico de nombre en los textos de Rick y consola
    function reemplazarNombre(texto) {
        return texto.replace(/Morty/g, window.nombreJugador || 'Morty');
    }
    window.nombreJugador = 'Morty';
    window.obtenerNombreJugador(function(nombre) {
        window.nombreJugador = nombre;
        // Reemplazar en los diálogos de la intro
        document.querySelectorAll('.intro-text').forEach(function(div) {
            div.innerHTML = reemplazarNombre(div.innerHTML);
        });
        // Reemplazar en las pistas de Rick
        if (window.pistasRick) {
            window.pistasRick = window.pistasRick.map(reemplazarNombre);
        }
        // Reemplazar en la consola de ayuda
        var hint = document.querySelector('.rick-console-hint');
        if (hint) hint.innerHTML = reemplazarNombre(hint.innerHTML);
    });

    // Mensajes épicos y enigmáticos para la consola (F12)
    window.addEventListener('DOMContentLoaded', function() {
        setTimeout(function() {
            const styleEpic = 'color: #00ff00; font-size: 18px; font-family: monospace; background: #111; padding: 8px; border-radius: 6px;';
            const styleRick = 'color: #00ffff; font-size: 16px; font-family: monospace; background: #001122; border-left: 4px solid #00ffff; padding: 8px; border-radius: 6px;';
            const styleWarning = 'color: #ff00ff; font-size: 15px; font-family: monospace; background: #220022; border-left: 4px solid #ff00ff; padding: 8px; border-radius: 6px;';
            const styleAscii = 'color: #00ff00; font-size: 12px; font-family: monospace; background: #000;';
            const nombre = window.nombreJugador || 'Morty';
            
            // ASCII art épico
            console.log('%c\n████████████████████████████████████████████████████████████████████████████████\n██                                                                            ██\n██   BIENVENIDO AL NÚCLEO DEL CÓDIGO, ' + nombre.toUpperCase() + '   ██\n██                                                                            ██\n████████████████████████████████████████████████████████████████████████████████\n', styleAscii);
            
            // Mensaje principal
            console.log('%c[SOURCE ALERT] Has entrado al verdadero corazón de la realidad.', styleEpic);
            console.log('%c[INSTRUCCIÓN SECRETA] Solo los elegidos abren la consola. Aquí, el código fuente es tu mapa, tu espada y tu destino.', styleRick);
            console.log('%cRick: ' + nombre + ', si estás leyendo esto, es porque entendiste que el verdadero poder está en el SOURCE. No todos llegan tan lejos.', styleRick);
            console.log('%c[GLITCH WARNING] El hacker dejó pistas entre los comentarios, variables y funciones. ¡No te fíes de lo que ves en pantalla!', styleWarning);
            console.log('%c[EPIC QUEST] Busca patrones, busca anomalías, busca TODO. El multiverso depende de tu curiosidad y tu ingenio.', styleEpic);
            // Pista enigmática
            console.log('%c[RICK TIP] La clave no es directa. Probá resolver esto: Si x = 7*7*7 - 4*4*4, ¿cuánto vale x + 200? (No te olvides de mirar los elementos en F12, hay más de lo que parece...)', styleRick);
            // Pista matemática
            console.log('%c[ENIGMA] x = a³ - b³, con a=7 y b=4. ¿Qué número te da si sumás 200 a ese resultado? Ese número es la clave...', styleWarning);
            // Mensaje final
            console.log('%c[CONSEJO FINAL] Si logras descifrar el mensaje oculto en el source, desbloquearás el verdadero final. ¡No te detengas, ' + nombre + '!', styleEpic);
        }, 1000);

        // Pista oculta en Elements
        setTimeout(function() {
            var pista = document.createElement('div');
            pista.innerHTML = '<pre style="color:#00ff00;font-family:monospace;font-size:15px;background:#111;padding:10px;border-radius:8px;">' +
                'RICK TE SUSURRA DESDE EL SOURCE:\n' +
                'La clave está en la ecuación: x = 7³ - 4³; clave = x + 200\n' +
                'No te fíes de los comentarios fáciles. El multiverso premia a los que piensan.' +
                '</pre>';
            pista.style.display = 'none';
            pista.id = 'rick-source-hint';
            document.body.appendChild(pista);
            // Para que el usuario la vea en Elements
            // También se puede buscar por id="rick-source-hint"
        }, 1200);
        });
    </script>

    <script>
        const titulos = [
            "D:\\EscapeC137\\Rooms\\Room2",
            "Room 2: Parche Binario",
            "Parche Binario"
        ];

        let iTitulo = 0;
        function cambiarTituloGlitch() {
            const h1 = document.getElementById("titulo-room2");
            h1.innerText = titulos[iTitulo];
            h1.style.opacity = "0";
            h1.style.transition = "opacity 0.2s";
            setTimeout(() => {
                h1.style.opacity = "1";
            }, 100);

            iTitulo = (iTitulo + 1) % titulos.length;
            setTimeout(cambiarTituloGlitch, 1300);
        }

        cambiarTituloGlitch();
    </script>
    <script>
// Adaptado para vanilla y colores balatro-verde
const vert = `
attribute vec2 position;
varying vec2 vUv;
void main() {
    vUv = position * 0.5 + 0.5;
    gl_Position = vec4(position, 0, 1);
}
`;
const frag = `
precision highp float;
varying vec2 vUv;
uniform float iTime;
uniform vec2 iResolution;

// COLORES BALATRO TEMA VERDE/NEGRO
vec3 color1 = vec3(0.03, 0.10, 0.07);   // casi negro, más oscuro aún
vec3 color2 = vec3(0.01, 0.20, 0.07);   // verde MUY oscuro
vec3 color3 = vec3(0.04, 0.45, 0.13);   // verde neón, pero más bajito


void main() {
    vec2 uv = (vUv - 0.5) * 2.0;
    float len = length(uv);

    float angle = atan(uv.y, uv.x);
    float t = iTime * 0.12;
    float spin = angle + t + sin(t + len * 8.0) * 0.15;

    float band = smoothstep(0.3, 0.7, abs(sin(len * 6.0 - t * 2.0 + spin * 2.0)));

    vec3 col = mix(color1, color2, band);

    // Efectos tipo balatro swirl
    float swirl = 0.6 + 0.4 * cos(t * 0.8 + len * 5.0 + spin * 2.5);
    col = mix(col, color3, swirl * 0.5 * (1.0 - len));
    
    gl_FragColor = vec4(col, 1.0);
}
`;

// Helper WebGL
function createShader(gl, src, type) {
    let s = gl.createShader(type);
    gl.shaderSource(s, src);
    gl.compileShader(s);
    if (!gl.getShaderParameter(s, gl.COMPILE_STATUS)) throw gl.getShaderInfoLog(s);
    return s;
}
function createProgram(gl, vsrc, fsrc) {
    let p = gl.createProgram();
    gl.attachShader(p, createShader(gl, vsrc, gl.VERTEX_SHADER));
    gl.attachShader(p, createShader(gl, fsrc, gl.FRAGMENT_SHADER));
    gl.linkProgram(p);
    if (!gl.getProgramParameter(p, gl.LINK_STATUS)) throw gl.getProgramInfoLog(p);
    return p;
}

function startBalatroBg() {
    const canvas = document.getElementById("balatro-bg");
    const gl = canvas.getContext("webgl");
    if (!gl) return;

    // Fullscreen canvas
    function resize() {
        canvas.width = window.innerWidth;
        canvas.height = window.innerHeight;
        gl.viewport(0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight);
    }
    resize();
    window.addEventListener("resize", resize);

    // Compile shader
    const prog = createProgram(gl, vert, frag);
    gl.useProgram(prog);

    // Triangle (full screen quad)
    const vertices = new Float32Array([
        -1, -1, 1, -1, -1, 1,
        -1, 1, 1, -1, 1, 1
    ]);
    const buf = gl.createBuffer();
    gl.bindBuffer(gl.ARRAY_BUFFER, buf);
    gl.bufferData(gl.ARRAY_BUFFER, vertices, gl.STATIC_DRAW);

    const posLoc = gl.getAttribLocation(prog, "position");
    gl.enableVertexAttribArray(posLoc);
    gl.vertexAttribPointer(posLoc, 2, gl.FLOAT, false, 0, 0);

    const timeLoc = gl.getUniformLocation(prog, "iTime");
    const resLoc = gl.getUniformLocation(prog, "iResolution");

    function draw(now) {
        gl.useProgram(prog);
        gl.uniform1f(timeLoc, now * 0.001);
        gl.uniform2f(resLoc, canvas.width, canvas.height);
        gl.drawArrays(gl.TRIANGLES, 0, 6);
        requestAnimationFrame(draw);
    }
    requestAnimationFrame(draw);
}
startBalatroBg();
</script>

<script>
window.addEventListener('DOMContentLoaded', function() {
    // Espera la duración de la animación de la intro (14s por seguridad)
    setTimeout(function() {
        var intro = document.querySelector('.intro-sequence');
        if (intro) {
            intro.style.opacity = '0';
            intro.style.transition = 'opacity 1s';
            setTimeout(function() {
                intro.style.display = 'none';
                // Mostrar el juego (contenedor principal)
                var container = document.querySelector('.container');
                if (container) container.style.display = 'block';
            }, 1200);
        }
    }, 14000);
    // Asegurarse que el juego esté oculto al principio
    var container = document.querySelector('.container');
    if (container) container.style.display = 'none';
});
</script>

<script>
// Animaciones épicas y troll para el juego (inspiradas en Room5)
function animacionEpicaTransicion(callback) {
    const flash = document.createElement('div');
    flash.className = 'flash-screen';
    document.body.appendChild(flash);
    setTimeout(() => {
        flash.remove();
        callback();
    }, 1200);
}

function animacionGlitchFondo() {
    document.body.classList.add('explosion');
    setTimeout(() => document.body.classList.remove('explosion'), 700);
}

function animacionShakeTablero() {
    const tablero = document.getElementById('tablero');
    if(tablero) {
        tablero.classList.add('explosion');
        setTimeout(() => tablero.classList.remove('explosion'), 700);
    }
}

function animacionBitsTroll() {
    const trollBits = document.getElementById('troll-bits');
    trollBits.innerHTML = '';
    trollBits.style.position = 'absolute';
    trollBits.style.top = '60px';
    trollBits.style.left = '50%';
    trollBits.style.transform = 'translateX(-50%)';
    trollBits.style.display = 'grid';
    trollBits.style.gridTemplateColumns = 'repeat(8, 18px)';
    trollBits.style.gap = '2px';
    trollBits.style.zIndex = '10';
    for(let i=0;i<64;i++){
        const bit = document.createElement('div');
        bit.style.width = '16px';
        bit.style.height = '16px';
        bit.style.borderRadius = '3px';
        bit.style.background = (Math.random()>0.5)?'#fff':'#111';
        bit.style.boxShadow = '0 0 8px #0f0';
        bit.style.opacity = '0.7';
        bit.style.animation = `glitch 2s infinite alternate, shake 1.5s infinite ${i*0.03}s`;
        trollBits.appendChild(bit);
    }
}

// Llamar a la animación de bits troll al cargar
window.addEventListener('DOMContentLoaded', animacionBitsTroll);

// MULTIPLICAR ANIMACIONES EN ASPECTOS DEL JUEGO
function animacionesMultiples() {
    animacionGlitchFondo();
    animacionShakeTablero();
    setTimeout(animacionGlitchFondo, 800);
    setTimeout(animacionShakeTablero, 1200);
    setTimeout(animacionBitsTroll, 1500);
}

// BOTÓN DE EXPLICACIÓN SOLO MOLESTA
window.toggleLore = function() {
    const lore = document.getElementById('lorePanel');
    if (lore) {
        lore.classList.toggle('show');
        lore.innerHTML = '<h3>¿Esperabas una explicación útil?</h3><p>Rick: ¡JA! Pensaste que esto te iba a ayudar, pero solo te hace perder tiempo. Volvé al juego, ' + (window.nombreJugador||'Morty') + '.</p>';
        animacionesMultiples();
    }
};

// PISTAS F12 ALREDEDOR DE LA PANTALLA
function pistasF12Alrededor() {
    const pistas = [
        'Usa F' + (24-12),
        
    ];
    pistas.forEach((txt, i) => {
        const pista = document.createElement('div');
        pista.innerText = txt;
        pista.style.position = 'fixed';
        pista.style.color = '#0f0';
        pista.style.fontFamily = 'monospace';
        pista.style.fontSize = '18px';
        pista.style.zIndex = 2000;
        pista.style.opacity = '0.7';
        pista.style.pointerEvents = 'none';
        pista.style.transition = 'transform 0.7s, opacity 0.7s';
        // Posiciones random en el borde
        const pos = [
            {top:'10px', left:'10px'},
            {top:'10px', right:'10px'},
            {bottom:'10px', left:'10px'},
            {bottom:'10px', right:'10px'},
            {top:'50%', left:'10px', transform:'translateY(-50%)'},
            {top:'50%', right:'10px', transform:'translateY(-50%)'},
            {top:'10px', left:'50%', transform:'translateX(-50%)'},
            {bottom:'10px', left:'50%', transform:'translateX(-50%)'},
            {top:'30%', left:'5%'},
            {top:'70%', right:'5%'},
        ];
        Object.assign(pista.style, pos[i]);
        document.body.appendChild(pista);
        // Animación de aparición
        pista.animate([
            {opacity:0, transform:'scale(0.7)'},
            {opacity:0.7, transform:'scale(1.1)'},
            {opacity:0.7, transform:'scale(1)'},
        ], {duration: 1200, fill:'forwards'});
    });
}
window.addEventListener('DOMContentLoaded', pistasF12Alrededor);

// VERIFICAR RESPUESTA Y PASAR DE ROOM CON ANIMACIÓN ÉPICA
window.verificar = function() {
    const val = document.getElementById('respuesta').value.trim();
    if(val === '479') {
        animacionEpicaTransicion(() => {
            // Animaciones extra
            animacionesMultiples();
            // Redirigir a Room3 desbloqueada
            window.location.href = '/Home/Room3?unlocked=1';
        });
    } else {
        animacionShakeTablero();
        document.getElementById('mensaje').innerText = '¡Respuesta incorrecta!';
        document.getElementById('mensaje').classList.add('show');
        setTimeout(()=>{
            document.getElementById('mensaje').classList.remove('show');
        }, 1200);
    }
};
</script>

</body>
<!-- VISITA CONSOLEEEEEEEEEEEEEEEE-->
<!-- VISITA CONSOLEEEEEEEEEEEEEEEE-->
<!-- VISITA CONSOLEEEEEEEEEEEEEEEE-->
<!-- VISITA CONSOLEEEEEEEEEEEEEEEE-->
<!-- VISITA CONSOLEEEEEEEEEEEEEEEE-->
<!-- VISITA CONSOLEEEEEEEEEEEEEEEE-->
<!-- VISITA CONSOLEEEEEEEEEEEEEEEE-->
<!-- VISITA CONSOLEEEEEEEEEEEEEEEE-->
<!-- VISITA CONSOLEEEEEEEEEEEEEEEE-->
<!-- VISITA CONSOLEEEEEEEEEEEEEEEE-->