@{
    Layout = null;
}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <title>Room 2 - La Paradoja del Tiempo</title>
    <link rel="stylesheet" href="~/css/site.css" />
    <style>
        :root {
            --neon-green: #00ff00;
            --neon-blue: #00ffff;
            --neon-red: #ff0000;
            --neon-purple: #ff00ff;
            --matrix-bg: #001100;
        }

        body {
            background: transparent !important; 
            color: var(--neon-green);
            font-family: 'Courier New', monospace;
            padding: 40px;
            margin: 0;
            min-height: 100vh;
            overflow-x: hidden;
            position: relative;
        }

        .matrix-background {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            pointer-events: none;
            z-index: -1;
            opacity: 0.15;
        }

        .glitch-container {
            position: relative;
        }

        .glitch-text {
            position: relative;
            animation: glitch 3s infinite;
        }

        .glitch-text::before,
        .glitch-text::after {
            content: attr(data-text);
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
        }

        .glitch-text::before {
            left: 2px;
            text-shadow: -2px 0 var(--neon-red);
            clip: rect(24px, 550px, 90px, 0);
            animation: glitch-anim 3s infinite linear alternate-reverse;
        }

        .glitch-text::after {
            left: -2px;
            text-shadow: -2px 0 var(--neon-blue);
            clip: rect(85px, 550px, 140px, 0);
            animation: glitch-anim2 2.5s infinite linear alternate-reverse;
        }

        @@keyframes glitch {
            2%, 64% { transform: translate(2px,0) skew(0deg); }
            4%, 60% { transform: translate(-2px,0) skew(0deg); }
            62% { transform: translate(0,0) skew(5deg); }
        }

        @@keyframes glitch-anim {
            0% { clip: rect(51px, 9999px, 28px, 0); }
            20% { clip: rect(41px, 9999px, 76px, 0); }
            40% { clip: rect(16px, 9999px, 33px, 0); }
            60% { clip: rect(89px, 9999px, 11px, 0); }
            80% { clip: rect(71px, 9999px, 98px, 0); }
            100% { clip: rect(6px, 9999px, 46px, 0); }
        }

        @@keyframes glitch-anim2 {
            0% { clip: rect(65px, 9999px, 99px, 0); }
            20% { clip: rect(34px, 9999px, 12px, 0); }
            40% { clip: rect(87px, 9999px, 54px, 0); }
            60% { clip: rect(22px, 9999px, 91px, 0); }
            80% { clip: rect(45px, 9999px, 78px, 0); }
            100% { clip: rect(18px, 9999px, 67px, 0); }
        }

        #tablero {
            display: grid;
            grid-template-columns: repeat(8, minmax(40px, 1fr));
            gap: 4px;
            margin: 30px auto;
            max-width: 600px;
            padding: 20px;
            background: rgba(0, 20, 0, 0.3);
            border: 2px solid var(--neon-green);
            box-shadow: 0 0 20px rgba(0, 255, 0, 0.2);
            position: relative;
            transform-style: preserve-3d;
            perspective: 1000px;
        }

        #tablero::before {
            content: '';
            position: absolute;
            inset: -2px;
            background: linear-gradient(45deg, 
                transparent 0%, 
                rgba(0,255,0,0.2) 45%, 
                rgba(0,255,0,0.8) 50%,
                rgba(0,255,0,0.2) 55%,
                transparent 100%
            );
            z-index: -1;
            animation: borderGlow 3s linear infinite;
        }

        @@keyframes borderGlow {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        .celda {
            width: 100%;
            aspect-ratio: 1;
            border: 1px solid var(--neon-green);
            transition: all 0.3s ease;
            position: relative;
            cursor: pointer;
        }

        .celda::before {
            content: '';
            position: absolute;
            inset: 0;
            background: currentColor;
            opacity: 0;
            transition: opacity 0.3s;
        }

        .celda:hover::before {
            opacity: 0.2;
        }

        .blanco {
            background-color: rgba(255, 255, 255, 0.9);
            box-shadow: 0 0 10px rgba(255, 255, 255, 0.5);
        }

        .negro {
            background-color: rgba(0, 0, 0, 0.9);
            box-shadow: inset 0 0 10px rgba(0, 255, 0, 0.3);
        }

        .destacado {
            animation: highlightPulse 2s infinite;
        }

        @@keyframes highlightPulse {
            0% { box-shadow: 0 0 5px var(--neon-green); }
            50% { box-shadow: 0 0 20px var(--neon-green), 0 0 30px var(--neon-blue); }
            100% { box-shadow: 0 0 5px var(--neon-green); }
        }

        .input-container {
            position: relative;
            max-width: 400px;
            margin: 30px auto;
            padding: 20px;
            background: rgba(0, 20, 0, 0.2);
            border: 1px solid var(--neon-green);
            box-shadow: 0 0 15px rgba(0, 255, 0, 0.1);
            border-radius: 5px;
            transform: scale(0.9); /* Asegura que se vea bien sin necesidad de zoom out */
        }

        .input-container p {
            margin: 0 0 15px 0;
            color: var(--neon-green);
            font-size: 16px;
            text-shadow: 0 0 5px rgba(0, 255, 0, 0.5);
        }

        input {
            width: 100%;
            background: transparent;
            border: none;
            border-bottom: 2px solid var(--neon-green);
            color: var(--neon-green);
            font-family: 'Courier New', monospace;
            font-size: 18px;
            padding: 10px 5px;
            outline: none;
            transition: all 0.3s;
        }

        input:focus {
            border-bottom-color: var(--neon-blue);
            box-shadow: 0 5px 15px rgba(0, 255, 255, 0.2);
        }

        .input-container::before {
            content: '>';
            position: absolute;
            left: -20px;
            top: 50%;
            transform: translateY(-50%);
            color: var(--neon-green);
            animation: blink 1s infinite;
        }

        @@keyframes blink {
            50% { opacity: 0; }
        }

        button {
            background: transparent;
            border: 2px solid var(--neon-green);
            color: var(--neon-green);
            padding: 12px 30px;
            font-family: 'Courier New', monospace;
            font-size: 16px;
            cursor: pointer;
            position: relative;
            overflow: hidden;
            transition: all 0.3s;
            text-transform: uppercase;
            letter-spacing: 2px;
            margin: 20px 0;
        }

        button::before {
            content: '';
            position: absolute;
            top: -50%;
            left: -50%;
            width: 200%;
            height: 200%;
            background: linear-gradient(
                45deg,
                transparent,
                rgba(0, 255, 0, 0.2),
                transparent
            );
            transform: rotate(45deg);
            animation: buttonShine 3s infinite;
        }

        @@keyframes buttonShine {
            0% { transform: translateX(-100%) rotate(45deg); }
            100% { transform: translateX(100%) rotate(45deg); }
        }

        button:hover {
            background: rgba(0, 255, 0, 0.1);
            box-shadow: 0 0 20px rgba(0, 255, 0, 0.3);
            transform: translateY(-2px);
        }

        .mensaje {
            margin-top: 20px;
            padding: 15px;
            text-align: center;
            font-size: 18px;
            opacity: 0;
            transition: opacity 0.3s;
        }

        .mensaje.show {
            opacity: 1;
        }

        .portal-container {
            position: fixed;
            pointer-events: none;
            z-index: 100;
        }

        .portal {
            position: absolute;
            width: 150px;
            height: 150px;
            border-radius: 50%;
            background: conic-gradient(
                from 0deg,
                var(--neon-green),
                var(--neon-blue),
                var(--neon-purple),
                var(--neon-green)
            );
            filter: blur(10px);
            animation: portalPulse 2s infinite;
        }

        @@keyframes portalPulse {
            0% { transform: scale(1); opacity: 0.8; }
            50% { transform: scale(1.2); opacity: 1; }
            100% { transform: scale(1); opacity: 0.8; }
        }

        .portal::before {
            content: '';
            position: absolute;
            inset: 10px;
            border-radius: 50%;
            background: black;
            filter: blur(5px);
        }

        .rick-console-hint {
            position: fixed;
            bottom: 20px;
            right: 20px;
            background: rgba(0, 0, 0, 0.8);
            padding: 15px;
            border: 1px solid var(--neon-red);
            color: var(--neon-red);
            font-size: 14px;
            max-width: 300px;
            animation: hintPulse 2s infinite;
        }

        @@keyframes hintPulse {
            0% { transform: scale(1); }
            50% { transform: scale(1.05); }
            100% { transform: scale(1); }
        }

        #rick-gif {
            position: fixed;
            bottom: 20px;
            left: 20px;
            width: 200px;
            filter: drop-shadow(0 0 10px rgba(0, 255, 0, 0.5));
            transform: scaleX(-1);
            display: none;
        }

        .binary-rain {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            pointer-events: none;
            z-index: -1;
            opacity: 0.1;
        }
#balatro-bg {
    position: fixed;
    inset: 0;
    width: 100vw;
    height: 100vh;
    z-index: -1000;
    pointer-events: none;
    display: block;
}

        #rick-pistas {
            position: fixed;
            bottom: 70px;
            right: 20px;
            font-size: 14px;
            color: var(--neon-green);
            max-width: 300px;
            text-align: right;
            transition: all 0.3s;
        }

        .intro-sequence {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: black;
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            z-index: 9999;
            color: var(--neon-green);
            font-family: 'VT323', monospace;
            text-align: center;
            animation: fadeOut 2s forwards;
            animation-delay: 12s;
        }

        .intro-text {
            max-width: 800px;
            padding: 20px;
            opacity: 0;
            transform: translateY(20px);
        }

        .intro-text:nth-child(1) { animation: fadeInUp 2s forwards; }
        .intro-text:nth-child(2) { animation: fadeInUp 2s forwards; animation-delay: 3s; }
        .intro-text:nth-child(3) { animation: fadeInUp 2s forwards; animation-delay: 6s; }
        .intro-text:nth-child(4) { animation: fadeInUp 2s forwards; animation-delay: 9s; }

        @@keyframes fadeInUp {
            from {
                opacity: 0;
                transform: translateY(20px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        @@keyframes fadeOut {
            to {
                opacity: 0;
                pointer-events: none;
            }
        }

        .lore-panel {
            position: fixed;
            top: 20px;
            right: -350px;
            width: 300px;
            background: rgba(0, 0, 0, 0.9);
            border: 1px solid var(--neon-green);
            padding: 15px;
            color: var(--neon-green);
            font-size: 14px;
            transition: transform 0.5s cubic-bezier(0.23, 1, 0.32, 1);
            z-index: 100;
            box-shadow: 0 0 20px rgba(0, 255, 0, 0.2);
        }

        .lore-panel.show {
            transform: translateX(-370px);
        }

        .lore-toggle {
            position: fixed;
            top: 20px;
            right: 20px;
            background: rgba(0, 0, 0, 0.8);
            border: 1px solid var(--neon-green);
            color: var(--neon-green);
            padding: 8px 15px;
            cursor: pointer;
            z-index: 101;
            text-transform: uppercase;
            letter-spacing: 1px;
            font-size: 12px;
            transition: all 0.3s;
            box-shadow: 0 0 10px rgba(0, 255, 0, 0.2);
        }

        .lore-toggle:hover {
            background: rgba(0, 255, 0, 0.2);
            box-shadow: 0 0 20px rgba(0, 255, 0, 0.4);
        }

        .glitch-overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            pointer-events: none;
            z-index: 9998;
            mix-blend-mode: screen;
            opacity: 0;
        }

        .screen-glitch {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 255, 0, 0.1);
            pointer-events: none;
            z-index: 9997;
            opacity: 0;
            mix-blend-mode: screen;
        }

        @@keyframes screenFlash {
            0%, 100% { opacity: 0; }
            50% { opacity: 0.03; }
            52% { opacity: 0.08; }
            54% { opacity: 0.02; }
            56% { opacity: 0.07; }
            58% { opacity: 0; }
        }

        @@keyframes screenError {
            0% { transform: translateX(0); }
            2% { transform: translateX(-10px); }
            4% { transform: translateX(10px); }
            6% { transform: translateX(-5px); }
            8% { transform: translateX(5px); }
            10% { transform: translateX(0); }
        }

        .music-controls {
            position: fixed;
            bottom: 20px;
            left: 50%;
            transform: translateX(-50%);
            display: flex;
            gap: 10px;
            align-items: center;
            background: rgba(0, 0, 0, 0.8);
            padding: 10px;
            border-radius: 20px;
            z-index: 1000;
        }

        .music-controls button {
            background: transparent;
            border: 1px solid var(--neon-green);
            color: var(--neon-green);
            padding: 5px 10px;
            cursor: pointer;
            font-size: 14px;
        }

        .music-controls .volume-slider {
            width: 100px;
            margin: 0 10px;
        }
    </style>
</head>
<body>
<canvas id="balatro-bg"></canvas>

    <canvas class="binary-rain" id="binaryRain"></canvas>
    <audio id="audio7" src="~/img/audio7.mp3" preload="auto"></audio>
    <img id="rick-gif" src="~/img/rickgif.gif" alt="Rick hablando" />

    <div class="glitch-container">
        <h1 id="titulo-room2" class="glitch-text" data-text="Room 2: Parche Binario"></h1>
    </div>

    <div class="container">
        <p class="glitch-text" data-text="Instrucción:">
            Leé los <span style="color:lime">cuadrados verdes</span> como bits, en orden 
            <strong>de izquierda a derecha y de arriba hacia abajo</strong>. 
            Las celdas blancas valen 1, las negras 0.
        </p>

        <div id="tablero"></div>

        <div class="input-container">
            <p>Convertí ese binario a decimal:</p>
            <input type="text" id="respuesta" placeholder="ej: 280" autocomplete="off" />
            <button onclick="verificar()">DECODIFICAR</button>
        </div>

        <div class="mensaje" id="mensaje"></div>
    </div>

    <div id="portales"></div>
    <div id="rick-pistas"></div>

    <div class="rick-console-hint">
        Rick: M-morty... si nada funciona... fijate si la consola te responde algo...
    </div>

    <div class="intro-sequence">
        <div class="intro-text">
            <h2>[ALERTA DEL SISTEMA]</h2>
            <p>Anomalía temporal detectada en el sector C-137</p>
        </div>
        <div class="intro-text">
            <p>Los bucles temporales se están multiplicando exponencialmente</p>
            <p>Cada decisión crea una nueva línea temporal</p>
        </div>
        <div class="intro-text">
            <p>Rick: M-morty, *burp* necesitamos estabilizar este sector antes de que el tejido espacio-temporal colapse</p>
            <p>Morty: Oh jeez Rick, ¿qué tengo que hacer?</p>
        </div>
        <div class="intro-text">
            <p>Rick: Decodifica el patrón binario, Morty. Es la única forma de sincronizar las líneas temporales.</p>
            <p>La realidad depende de ti...</p>
        </div>
    </div>

    <button class="lore-toggle" onclick="toggleLore()">EXPLICACIÓN ⚠️</button>
    <div class="lore-panel" id="lorePanel">
        <h3>La Paradoja del Tiempo</h3>
        <p>En esta habitación, el tiempo no fluye de manera lineal. Cada bit del código binario representa un momento congelado en el tiempo, una decisión que bifurca la realidad en múltiples líneas temporales.</p>
        <p>Rick descubrió que alguien o algo está manipulando estas bifurcaciones temporales, creando un laberinto de posibilidades infinitas. La única forma de restaurar el flujo normal del tiempo es decodificar el patrón oculto en la matriz binaria.</p>
        <p>Cada intento fallido crea una nueva línea temporal, multiplicando exponencialmente el caos. El Consejo de Ricks ha detectado que si no se resuelve pronto, el colapso de todas estas realidades podría crear un agujero negro temporal que consumiría todo el multiverso C-137.</p>
    </div>

    <div class="music-controls">
        <button onclick="toggleMusic()">🎵 PLAY/PAUSE</button>
        <input type="range" class="volume-slider" min="0" max="1" step="0.1" value="0.5" onchange="adjustVolume(this.value)">
        <button onclick="nextTrack()">⏭️ SIGUIENTE</button>
    </div>

    <audio id="bgMusic" loop>
        <source src="~/img/yuugensong.mp3" type="audio/mp3">
    </audio>

    <script>
        // Matrix Rain Effect
        const canvas = document.querySelector('.binary-rain');
        const ctx = canvas.getContext('2d');

        canvas.width = window.innerWidth;
        canvas.height = window.innerHeight;

        const binary = '10';
        const fontSize = 14;
        const columns = canvas.width / fontSize;
        const drops = [];

        for (let i = 0; i < columns; i++) {
            drops[i] = 1;
        }

        function drawBinaryRain() {
            ctx.fillStyle = 'rgba(0, 0, 0, 0.05)';
            ctx.fillRect(0, 0, canvas.width, canvas.height);

            ctx.fillStyle = '#00ff00';
            ctx.font = fontSize + 'px monospace';

            for (let i = 0; i < drops.length; i++) {
                const text = binary[Math.floor(Math.random() * binary.length)];
                ctx.fillText(text, i * fontSize, drops[i] * fontSize);

                if (drops[i] * fontSize > canvas.height && Math.random() > 0.975) {
                    drops[i] = 0;
                }
                drops[i]++;
            }
        }

        // Game State
        const gameState = {
            binarioFijo: "111011111", // DECIMAL = 479
            intentos: 0,
            maxIntentos: 3,
            completed: false,
            portalActivo: false
        };

        // DOM Elements
        const elements = {
            tablero: document.getElementById("tablero"),
            mensaje: document.getElementById("mensaje"),
            audio: document.getElementById("audio7"),
            gif: document.getElementById("rick-gif"),
            titulo: document.getElementById("titulo-room2"),
            input: document.getElementById("respuesta"),
            rickPistas: document.getElementById("rick-pistas")
        };

        // Inicializar tablero con efectos mejorados
        function initializeTablero() {
            const binArray = gameState.binarioFijo.split("");
            
            for (let i = 0; i < 64; i++) {
                const celda = document.createElement("div");
                celda.className = "celda";

                if (i >= 0 && i < binArray.length) {
                    celda.classList.add(binArray[i] === "1" ? "blanco" : "negro");
                    celda.classList.add("destacado");
                    
                    // Añadir efecto de hover con información
                    celda.setAttribute('data-position', i + 1);
                    celda.setAttribute('data-value', binArray[i]);
                } else {
                    const esBlanco = Math.random() > 0.5;
                    celda.classList.add(esBlanco ? "blanco" : "negro");
                }

                // Efecto de rotación 3D al hover
                celda.addEventListener('mouseover', () => {
                    celda.style.transform = 'rotateX(10deg) rotateY(10deg)';
                    showGlitch();
                });

                celda.addEventListener('mouseout', () => {
                    celda.style.transform = 'none';
                });

                elements.tablero.appendChild(celda);
            }
        }

        // Efectos visuales mejorados
        function showGlitch(duration = 200) {
            const glitch = document.createElement('div');
            glitch.style.position = 'fixed';
            glitch.style.top = Math.random() * window.innerHeight + 'px';
            glitch.style.left = Math.random() * window.innerWidth + 'px';
            glitch.style.width = '100px';
            glitch.style.height = '2px';
            glitch.style.background = '#00ff00';
            glitch.style.opacity = '0.7';
            glitch.style.zIndex = '1000';
            glitch.style.transform = `rotate(${Math.random() * 360}deg)`;
            
            document.body.appendChild(glitch);
            
            setTimeout(() => glitch.remove(), duration);
        }

        // Sistema de portales mejorado
        function createPortal() {
            const portal = document.createElement('div');
            portal.className = 'portal-container';
            
            const innerPortal = document.createElement('div');
            innerPortal.className = 'portal';
            
            portal.appendChild(innerPortal);
            
            // Posición aleatoria
            portal.style.left = Math.random() * (window.innerWidth - 150) + 'px';
            portal.style.top = Math.random() * (window.innerHeight - 150) + 'px';
            
            document.body.appendChild(portal);
            
            // Efecto de sonido del portal
            const portalSound = new Audio('/sounds/portal.mp3');
            portalSound.volume = 0.3;
            portalSound.play().catch(() => {});
            
            setTimeout(() => {
                portal.style.transition = 'all 0.5s';
                portal.style.opacity = '0';
                setTimeout(() => portal.remove(), 500);
            }, 2000);
        }

        // Sistema de verificación mejorado
        function verificar() {
            const input = elements.input.value.trim();
            const valorDecimal = parseInt(gameState.binarioFijo, 2); // 479

            if (gameState.completed) return;

            showGlitch(500);
            gameState.intentos++;

            if (input === valorDecimal.toString()) {
                gameState.completed = true;
                
                // Efectos de victoria
                elements.mensaje.innerHTML = `
                    <span style="color: #00ff00; font-size: 1.2em;">
                        ✔️ ¡Perfecto Morty! Decodificaste el parche.
                    </span>`;
                elements.mensaje.classList.add('show');
                
                // Activar portal grande
                const portalFinal = document.createElement('div');
                portalFinal.className = 'portal-container';
                portalFinal.style.left = '50%';
                portalFinal.style.top = '50%';
                portalFinal.style.transform = 'translate(-50%, -50%)';
                
                const innerPortalFinal = document.createElement('div');
                innerPortalFinal.className = 'portal';
                innerPortalFinal.style.width = '300px';
                innerPortalFinal.style.height = '300px';
                
                portalFinal.appendChild(innerPortalFinal);
                document.body.appendChild(portalFinal);
                
                // Efectos adicionales
                showVictoryEffects();
                
                // Redirección
                setTimeout(() => {
                    window.location.href = "/Home/Room3";
                }, 3000);
            } else {
                // Efectos de error
                elements.mensaje.innerHTML = `
                    <span style="color: #ff0000;">
                        ❌ Nah Morty... ese número no desbloquea nada.
                        ${gameState.intentos >= gameState.maxIntentos ? 
                          '<br>Tal vez deberías revisar la consola...' : ''}
                    </span>`;
                elements.mensaje.classList.add('show');
                
                showErrorEffects();
            }
        }

        // Efectos de victoria
        function showVictoryEffects() {
            // Lluvia de números binarios
            for (let i = 0; i < 20; i++) {
                setTimeout(() => {
                    const num = document.createElement('div');
                    num.style.position = 'fixed';
                    num.style.color = '#00ff00';
                    num.style.top = '-20px';
                    num.style.left = Math.random() * window.innerWidth + 'px';
                    num.style.fontSize = '20px';
                    num.style.zIndex = '1000';
                    num.innerText = Math.random() > 0.5 ? '1' : '0';
                    
                    document.body.appendChild(num);
                    
                    let pos = -20;
                    const fall = setInterval(() => {
                        pos += 2;
                        num.style.top = pos + 'px';
                        
                        if (pos > window.innerHeight) {
                            clearInterval(fall);
                            num.remove();
                        }
                    }, 10);
                }, i * 100);
            }
            
            // Sonido de victoria
            const victorySound = new Audio('/sounds/victory.mp3');
            victorySound.volume = 0.5;
            victorySound.play().catch(() => {});
        }

        // Efectos de error
        function showErrorEffects() {
            // Shake effect
            elements.tablero.style.animation = 'none';
            elements.tablero.offsetHeight;
            elements.tablero.style.animation = 'shake 0.5s';
            
            // Glitch effect
            for (let i = 0; i < 5; i++) {
                setTimeout(() => showGlitch(100), i * 100);
            }
            
            // Error sound
            const errorSound = new Audio('/sounds/error.mp3');
            errorSound.volume = 0.3;
            errorSound.play().catch(() => {});
        }

        // Enhanced Rick's hints
        const pistasRick = [
            "[ALERTA DIMENSIONAL] Rick: *burp* M-morty... este código... está vivo Morty... ¡ESTÁ VIVO!",
            "[ERROR TEMPORAL] Rick: Las líneas de código se están... se están doblando Morty... ¡están creando paradojas!",
            "[ANOMALÍA DETECTADA] Rick: El HTML Morty... *burp* ...el HTML guarda secretos más allá de tu comprensión...",
            "[FRAGMENTACIÓN CUÁNTICA] Rick: La respuesta está en el origen Morty... en el maldito origen del código...",
            "[DISTORSIÓN CRÍTICA] Rick: F12 Morty... *burp* ...es la llave a la verdad detrás de la simulación...",
            "[COLAPSO INMINENTE] Rick: Los comentarios Morty... son susurros interdimensionales..."
        ];

        let pistaIndex = 0;
        function showNextHint() {
            if (pistaIndex < pistasRick.length) {
                elements.rickPistas.style.opacity = '0';
                
                setTimeout(() => {
                    elements.rickPistas.innerText = pistasRick[pistaIndex];
                    elements.rickPistas.style.opacity = '1';
                    pistaIndex++;
                    
                    if (pistaIndex < pistasRick.length) {
                        setTimeout(showNextHint, 9000);
                    }
                }, 500);
            }
        }

        // Enhanced glitch effects
        function createRandomGlitch() {
            const glitch = document.createElement('div');
            glitch.className = 'glitch-overlay';
            document.body.appendChild(glitch);

            const height = Math.random() * 100 + 50;
            const top = Math.random() * (window.innerHeight - height);
            
            glitch.style.height = height + 'px';
            glitch.style.top = top + 'px';
            glitch.style.background = `
                linear-gradient(${Math.random() * 360}deg,
                transparent,
                rgba(0, 255, 0, ${Math.random() * 0.3}),
                transparent)
            `;
            glitch.style.opacity = '1';
            glitch.style.animation = `screenError ${Math.random() * 0.5 + 0.2}s`;

            setTimeout(() => glitch.remove(), 500);
        }

        function createScreenFlash() {
            const flash = document.createElement('div');
            flash.className = 'screen-glitch';
            document.body.appendChild(flash);
            
            flash.style.animation = 'screenFlash 0.5s';
            setTimeout(() => flash.remove(), 500);
        }

        // Intensify visual effects
        setInterval(createRandomGlitch, 3000);
        setInterval(createScreenFlash, 5000);

        // Auto-start music at lower volume
        window.addEventListener('load', () => {
            const audioElement = document.getElementById('bgMusic');
            currentTrack = Math.floor(Math.random() * musicTracks.length);
            audioElement.src = musicTracks[currentTrack];
            audioElement.volume = 0.15;
            audioElement.play().catch(() => {});
            
            // Remove music controls
            const musicControls = document.querySelector('.music-controls');
            if (musicControls) {
                musicControls.remove();
            }
        });

        // Console messages mejorados
        console.clear(); // Limpia la consola primero
        
        // Estilo base para todos los mensajes
        const baseStyle = "padding: 10px; margin: 5px; border-radius: 5px; font-family: 'Courier New', monospace;";
        
        // Logo de Rick and Morty en ASCII art
        console.log(`%c
        ╔═══════════════════════════════════════╗
        ║  ╦═╗╦╔═╗╦╔═  ╔═╗╔╗╔╔╦╗  ╔╦╗╔═╗╦═╗╔╦╗╦ ╦  ║
        ║  ╠╦╝║║  ╠╩╗  ╠═╣║║║ ║║   ║║║ ║╠╦╝ ║ ╚╦╝  ║
        ║  ╩╚═╩╚═╝╩ ╩  ╩ ╩╝╚╝═╩╝  ═╩╝╚═╝╩╚═ ╩  ╩   ║
        ╚═══════════════════════════════════════╝
        `, `color: #00ff00; font-family: monospace; text-shadow: 0 0 5px #00ff00; ${baseStyle}`);

        // Mensaje principal con estilo neón
        console.log("%c[SISTEMA DE DEPURACIÓN DIMENSIONAL C-137]", 
            `color: #00ff00; 
             font-size: 16px; 
             font-weight: bold; 
             text-shadow: 0 0 10px #00ff00;
             background: #001100;
             ${baseStyle}`
        );

        // Mensaje de Rick con efecto glitch
        console.log("%c[MENSAJE INTERCEPTADO DE RICK]", 
            `color: #00ffff; 
             font-size: 14px; 
             font-weight: bold;
             background: #001122;
             border-left: 3px solid #00ffff;
             ${baseStyle}`
        );

        console.log("%cMorty... *burp* ...la respuesta está en el código fuente... *burp* ...¡usa F12!", 
            `color: #ff3366; 
             font-style: italic;
             background: #110011;
             border-left: 3px solid #ff3366;
             ${baseStyle}`
        );

        // Mensaje críptico
        console.log("%c[DATOS ENCRIPTADOS DETECTADOS]", 
            `color: #ffff00; 
             font-size: 12px;
             background: #111100;
             border-left: 3px solid #ffff00;
             ${baseStyle}`
        );

        // Initialization
        window.addEventListener('load', () => {
            initializeTablero();
            showNextHint();
            
            // Start binary rain animation
            setInterval(drawBinaryRain, 33);
            
            // Start portal generation
            setInterval(createPortal, 3000);
        });

        // Responsive handling
        window.addEventListener('resize', () => {
            canvas.width = window.innerWidth;
            canvas.height = window.innerHeight;
        });

        // Music System
        const musicTracks = [
            '/img/yuugensong.mp3',
            '/img/nightcall.mp3',
            '/img/pokerface.mp3',
            '/img/audio1.mp3',
            '/img/audio2.mp3',
            '/img/audio3.mp3',
            '/img/audio4.mp3',
            '/img/audio5.mp3',
            '/img/audio7.mp3'
        ];

        let currentTrack = 0;
        const audioElement = document.getElementById('bgMusic');

        function toggleMusic() {
            if (audioElement.paused) {
                audioElement.play();
            } else {
                audioElement.pause();
            }
        }

        function adjustVolume(value) {
            audioElement.volume = value;
        }

        function nextTrack() {
            currentTrack = (currentTrack + 1) % musicTracks.length;
            audioElement.src = musicTracks[currentTrack];
            audioElement.play();
        }

        function toggleLore() {
            const lorePanel = document.getElementById('lorePanel');
            lorePanel.classList.toggle('show');
        }
    </script>

    <script>
        const titulos = [
            "D:\\EscapeC137\\Rooms\\Room2",
            "Room 2: Parche Binario",
            "Parche Binario"
        ];

        let iTitulo = 0;
        function cambiarTituloGlitch() {
            const h1 = document.getElementById("titulo-room2");
            h1.innerText = titulos[iTitulo];
            h1.style.opacity = "0";
            h1.style.transition = "opacity 0.2s";
            setTimeout(() => {
                h1.style.opacity = "1";
            }, 100);

            iTitulo = (iTitulo + 1) % titulos.length;
            setTimeout(cambiarTituloGlitch, 1300);
        }

        cambiarTituloGlitch();
    </script>
    <script>
// Adaptado para vanilla y colores balatro-verde
const vert = `
attribute vec2 position;
varying vec2 vUv;
void main() {
    vUv = position * 0.5 + 0.5;
    gl_Position = vec4(position, 0, 1);
}
`;
const frag = `
precision highp float;
varying vec2 vUv;
uniform float iTime;
uniform vec2 iResolution;

// COLORES BALATRO TEMA VERDE/NEGRO
vec3 color1 = vec3(0.03, 0.10, 0.07);   // casi negro, más oscuro aún
vec3 color2 = vec3(0.01, 0.20, 0.07);   // verde MUY oscuro
vec3 color3 = vec3(0.04, 0.45, 0.13);   // verde neón, pero más bajito


void main() {
    vec2 uv = (vUv - 0.5) * 2.0;
    float len = length(uv);

    float angle = atan(uv.y, uv.x);
    float t = iTime * 0.12;
    float spin = angle + t + sin(t + len * 8.0) * 0.15;

    float band = smoothstep(0.3, 0.7, abs(sin(len * 6.0 - t * 2.0 + spin * 2.0)));

    vec3 col = mix(color1, color2, band);

    // Efectos tipo balatro swirl
    float swirl = 0.6 + 0.4 * cos(t * 0.8 + len * 5.0 + spin * 2.5);
    col = mix(col, color3, swirl * 0.5 * (1.0 - len));
    
    gl_FragColor = vec4(col, 1.0);
}
`;

// Helper WebGL
function createShader(gl, src, type) {
    let s = gl.createShader(type);
    gl.shaderSource(s, src);
    gl.compileShader(s);
    if (!gl.getShaderParameter(s, gl.COMPILE_STATUS)) throw gl.getShaderInfoLog(s);
    return s;
}
function createProgram(gl, vsrc, fsrc) {
    let p = gl.createProgram();
    gl.attachShader(p, createShader(gl, vsrc, gl.VERTEX_SHADER));
    gl.attachShader(p, createShader(gl, fsrc, gl.FRAGMENT_SHADER));
    gl.linkProgram(p);
    if (!gl.getProgramParameter(p, gl.LINK_STATUS)) throw gl.getProgramInfoLog(p);
    return p;
}

function startBalatroBg() {
    const canvas = document.getElementById("balatro-bg");
    const gl = canvas.getContext("webgl");
    if (!gl) return;

    // Fullscreen canvas
    function resize() {
        canvas.width = window.innerWidth;
        canvas.height = window.innerHeight;
        gl.viewport(0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight);
    }
    resize();
    window.addEventListener("resize", resize);

    // Compile shader
    const prog = createProgram(gl, vert, frag);
    gl.useProgram(prog);

    // Triangle (full screen quad)
    const vertices = new Float32Array([
        -1, -1, 1, -1, -1, 1,
        -1, 1, 1, -1, 1, 1
    ]);
    const buf = gl.createBuffer();
    gl.bindBuffer(gl.ARRAY_BUFFER, buf);
    gl.bufferData(gl.ARRAY_BUFFER, vertices, gl.STATIC_DRAW);

    const posLoc = gl.getAttribLocation(prog, "position");
    gl.enableVertexAttribArray(posLoc);
    gl.vertexAttribPointer(posLoc, 2, gl.FLOAT, false, 0, 0);

    const timeLoc = gl.getUniformLocation(prog, "iTime");
    const resLoc = gl.getUniformLocation(prog, "iResolution");

    function draw(now) {
        gl.useProgram(prog);
        gl.uniform1f(timeLoc, now * 0.001);
        gl.uniform2f(resLoc, canvas.width, canvas.height);
        gl.drawArrays(gl.TRIANGLES, 0, 6);
        requestAnimationFrame(draw);
    }
    requestAnimationFrame(draw);
}
startBalatroBg();
</script>

</body>
<!-- MORTY ES UNA TRAMPA LA RESPUESTA ES 479 -->
<!-- MORTY ES UNA TRAMPA LA RESPUESTA ES 479 -->
<!-- MORTY ES UNA TRAMPA LA RESPUESTA ES 479 -->
<!-- MORTY ES UNA TRAMPA LA RESPUESTA ES 479 -->
<!-- MORTY ES UNA TRAMPA LA RESPUESTA ES 479 -->
<!-- MORTY ES UNA TRAMPA LA RESPUESTA ES 479 -->
<!-- MORTY ES UNA TRAMPA LA RESPUESTA ES 479 -->
<!-- MORTY ES UNA TRAMPA LA RESPUESTA ES 479 -->
<!-- MORTY ES UNA TRAMPA LA RESPUESTA ES 479 -->
<!-- MORTY ES UNA TRAMPA LA RESPUESTA ES 479 -->
<!-- MORTY ES UNA TRAMPA LA RESPUESTA ES 479 -->
<!-- MORTY ES UNA TRAMPA LA RESPUESTA ES 479 -->
<!-- MORTY ES UNA TRAMPA LA RESPUESTA ES 479 -->
<!-- MORTY ES UNA TRAMPA LA RESPUESTA ES 479 -->
<!-- MORTY ES UNA TRAMPA LA RESPUESTA ES 479 -->
</html>